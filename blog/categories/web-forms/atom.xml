<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Forms | Developer's Perception]]></title>
  <link href="http://elgsdyret.github.io/blog/categories/web-forms/atom.xml" rel="self"/>
  <link href="http://elgsdyret.github.io/"/>
  <updated>2013-05-27T20:58:10+02:00</updated>
  <id>http://elgsdyret.github.io/</id>
  <author>
    <name><![CDATA[Nikolaj Kaare NÃ¸rskov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working Effectively with ASP.NET and HttpContext]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/04/22/working-effectively-with-aspnet-and/"/>
    <updated>2013-04-22T19:15:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/04/22/working-effectively-with-aspnet-and</id>
    <content type="html"><![CDATA[<p>Often in an ASP.NET WebForms application you will get up with unmanageable depencencies on the ASP.NET web stack expressed through the HttpContext class.</p>

<p>This often appears in the form of code like this:</p>

<p>``` c#
public void DoSomeCoreStuff()<br/>
{</p>

<pre><code>var userId = (string)HttpContext.Current.Session["userId"];    
DoSomeMoreCoreStuff(userId); 
</code></pre>

<p>}
```</p>

<p>This code could be located anywhere in you codebase, and I have seen examples of such calls to session being done more or less inline in a string describing an SQL query. It does not necessarily have to be the Session property that is accessed though, the problem is the same if Application or other bits of the current http context is accessed this way.</p>

<p>There is a number of problems with this approach.</p>

<ul>
<li>Using a string like this is not strongly typed, which easily leads to errors. For instance the session variables might have had a different casing like &ldquo;CurrentUserId&rdquo;.</li>
<li>A static reference to HttpContext.Current causes a number of problems. Firstly, it will be hard to use the code in question outside the ASP.NET stack, and secondly it will be equally hard to write meaningful tests for the code in questions.</li>
</ul>


<h2>Options</h2>

<p>There are a number of ways to solve this problem leading to a much cleaner design enabling testing and reuse. All the options involves pushing the actual call to HttpContext.Current as far up in the call chain as possible, meaning in the code behind of the aspx page.</p>

<h3>Simple Types</h3>

<p>Given that the currentUserId in our example above is an string (or any other simple type or object that can be easily constructed) why not just use that? It can be injected through the constructor or the method in question.</p>

<p>``` c#
public void DoSomeCoreStuff(string userId)<br/>
{</p>

<pre><code>DoSomeMoreCoreStuff(userId); 
</code></pre>

<p>}
```</p>

<h3>Domain Specific Wrapper Class</h3>

<p>Often it is not as simple as a single entry that you want to retrieve from the session. Maybe there is a group of related entries that you want to use.</p>

<p>``` c#
public void DoSomeCoreStuff()
{</p>

<pre><code>var userId = (string)HttpContext.Current.Session["currentUserId"];   
var userColor = (string)HttpContext.Current.Session["favoriteColor"];   
var userNickname = (string)HttpContext.Current.Session["nick"];   
DoSomeMoreCoreStuff(userId, userColor, userNickname); 
</code></pre>

<p>}
```</p>

<p>In that case an interface named according to the relation (for instance UserContext in our example) and injected can solve this problem. The key is to have an implementation of the interface that actually wraps Session and ensure that the string key for the entry is not copied all over the code. The wrapper implementation is instantiated at the top level of the web stack, most often in the code behind class and elsewhere we code against the interface in a inversion of control style.</p>

<p>``` c#
public void DoSomeCoreStuff(UserContext userContext)
{</p>

<pre><code>var userId = userContext.Id;   
var userColor = userContext.FavoriteColor;   
var userNickname = userContext.NickName;   
DoSomeMoreCoreStuff(userId, userColor, userNickname); 
</code></pre>

<p>}
```</p>

<p>The implementation of the interface looks something like this:</p>

<p>``` c#
public class HttpContextUserContext : UserContext
{</p>

<pre><code>HttpContext context;    

public HttpContextUserContext(HttpContext context)   
{     
    this.context = context;   
}    

public string Id   
{     
    get     
    {       
        return (string)context.Session["currentUserId"];     
    }   
}    

public string FavoriteColor   
{     
    get     
    {       
        return (string)context.Session["favoriteColor"];     
    }   
}    

public string NickName   
{     
    get     
    {       
        return (string)context.Session["nick"];     
    }   
} 
</code></pre>

<p>}
```</p>

<p>It might seem like a lot of code, but the flexibility is definitely worth the small overhead of adding this.</p>

<h3>HttpContextBase</h3>

<p>The main problem with the original implementation of the HttpContext class is that it is not based on an interface nor an abstract base class. This means that reusing code that depends on HttpContext can be hard, and testing equally hard. Microsoft realized this problen when they released the MVC framework and added a class called HttpContextBase. The funny thing is that HttpContext does not inherit from HttpContextBase as that would be a breaking change, but it has the exact same API.</p>

<p>Thus, our problem from above with the static dependency could be solved as the following stepwise refactoring:</p>

<ul>
<li>Ensure that HttpContext is injected through the constructor or the method in question and ensure that HttpContext.Current is passed in as that value.</li>
<li>Replace HttpContext in the constructor or method with HttpContextBase and replace HttpContext.Current with new HttpContextWrapper(HttpContext.Current)</li>
</ul>


<p>And our example would then look something like this:</p>

<p>``` c#
public void DoSomeCoreStuff(HttpContextBase context)<br/>
{</p>

<pre><code>var userId = (string)context.Session["userId"];    
DoSomeMoreCoreStuff(userId); 
</code></pre>

<p>}
```</p>

<p>This might seem a bit overkill, but we are now able to use our method with a different implementation of HttpContextBase for reuse and testing purposes.</p>

<p>When doing a different implementation you should know that every base implementation in HttpContextBase just throws a NotImplementedException. Thus, you will need to override that different bits in your test and reuse implementations depending on what you really require. Alternatively, there are a couple of generic open source implementations available if you want to pull in that extra dependency.</p>

<p>In general I would recommend using one of the first approaches, but if you are working with a fairly large system that adheres to the big ball of mud &ldquo;design&rdquo; antipattern this might be difficult. Maybe it is just to difficult to discern any meaningful relation between the different data retrieved from HttpContext, and with this approach you can at least start writing some tests to get control back of the code.</p>

<p>As I mentioned earlier this is just one simple example as HttpContext have a lot of data and functionality built in.s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintainable ASP.NET Webforms - Part II]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-ii/"/>
    <updated>2012-09-08T13:36:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-ii</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />In the last post I described how I believe that implementing the MVP pattern is a feasible way of improving ASP.NET Web Forms code:<br /><br /><a href="http://nikolajkn.blogspot.dk/2012/09/maintainable-aspnet-webforms-part-i.html">http://nikolajkn.blogspot.dk/2012/09/maintainable-aspnet-webforms-part-i.html</a><br /><br />The most important lesson is still that you should not use ASP.NET Web Forms unless you absolutely have to.<br /><br /><h4>The Example</h4>I have added a tiny example to github:&nbsp;<a href="https://github.com/elgsdyret/mvp-example">https://github.com/elgsdyret/mvp-example</a><br /><br />Like any contrived example it might be too simple and too silly to really show the power of implementing the pages this way, but here is a short walk-through of the flow anyways:<br />The view loads the presenter with a reference to itself and asks it to PresentAllDogs: <pre class="brush: c#">protected void Page_Load(object sender, EventArgs e)<br />{<br /> presenter = new DogSearchPresenter(this);<br /> presenter.PresentAllDogs();<br />}<br /></pre> The presenter then retrieves all the dogs (probably from some kind of data layer) and asks the view to render the dogs:  <pre class="brush: c#">public void PresentAllDogs()<br />{<br /> view.RenderDogs(Dog.All());<br />}<br /></pre> The view just assigns a local field with the values retrived (in some scenarios it might be doing a databind or similar, all depending on how the template aspx is used):  <script type="syntaxhighlighter" class="brush: c#">&lt;![CDATA[ public void RenderDogs(IList<Dog> dogs) {  Dogs = dogs; } ]]&gt;</script> When the template is rendered it automatically renders the Dogs from the view:  <script type="syntaxhighlighter" class="brush: c#"><table> <tr><th>Name</th><th>Race</th></tr> <%foreach(var dog in Dogs)    { %>  <tr>   <td><%=dog.Name%></td>   <td><%=dog.Race%></td>  </tr>     <% } %></table></script> This way of rendering is my preferred as it puts just the right amount of rendering logic in the template. It does not work well if you need to manipulate specific rows of the table and have the viewstate handle which you clicked.  <br/><br/>For this you could use the listview control which is a decent compromise between using raw template rendering and having the view set values on elements using the runat server tag (I definetely prefer the first template rendering.)  <br/><br/>Happy coding!    </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Alexander Beletsky</div>
<div class='content'>
Good stuff.<br /><br />There is ASP.NET MVP framework. <br /><br />http://aspnetmvp.codeplex.com/<br /><br />But I also still prefer lightweight custom solutions.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintainable ASP.NET Webforms - Part I]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-i/"/>
    <updated>2012-09-08T11:04:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-i</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br /><br />In the next couple of blog posts I will try to outline how I try to improve the maintainability and testability of pages written in the ASP.NET Web Forms framework.<br /><br /><h3>Don't use ASP.NET Web Forms</h3><div>If you are not forced there is no good reason to use this technology. There are many better ways to write your web applications. If you wish to work with the .NET framework you might consider:</div><div><ul><li>ASP.NET MVC latest incarnation (if it just has to be Microsoft)</li><li>Nancy (nice open source framework)</li><li>... and other options</li></ul><div>If your wish to use something other than .NET there are also many options (the reason I base this decision on whether you want .NET or not is simply because we started out discussing alternatives to Web Forms):</div></div><div><ul><li>&nbsp;RAILS, Sinatra, Goliath and other options on Ruby.</li><li>Django on Python.</li><li>Node.js potentially with the express framework.</li><li>... and lots of other options.</li></ul><div>Point is: <b>First way to improve your Web (Forms) code is to not use Web Forms.</b></div></div><div><br /></div><h3>I Have no Choice</h3><div>If you are stuck building Web Forms, it is most likely due to working on a legacy system build with this technology. There are lots of those out there and they are not getting upgraded to better options (at least not all of them).</div><div><br /></div><div>Thus, we have to manage somehow.</div><div><br /></div><div>The main tactic I advocate for coping with the platform is a pattern called MVP (Model-View-Presenter):</div><div><br /></div><div><a href="http://martinfowler.com/eaaDev/uiArchs.html">http://martinfowler.com/eaaDev/uiArchs.html</a></div><div><br /></div><div>(Go down a bit to find the description)</div><div><br /></div><div>Now this may not be the most easily accessible description and potentially you might not be able to implement the pattern in your application from this description (or it would require quite some work).</div><div><br />There is a catch to the pattern though. If used correctly it can help make your code more testable and easier to reason about, but it adds complexity and will not save you from having to know about viewstate, page lifecycle and other details about Web Forms.</div><h3>Bits and Pieces</h3><div>Not&nbsp;surprisingly&nbsp;we need a class for each of the roles of Model, View, and Presenter (actually a bit more).</div><div><br /></div><h4>Model&nbsp;</h4><div>The model is just a PONO (plain old .NET object) and can be your domain model or alternatively a view model. When to use a view model is largely a matter of taste, but I prefer not to do it unless I actually use it for something as it does add an overhead of an extra class and mapping code (consider using a tool like automapper if you do have both models).</div><div><br /></div><h4>View</h4><div>The view in our ASP.NET webform MVP implementation is basically our code behind file and the aspx file can be considered a template for helping with rendering the html. The key is to keep the code behind file very very slim as the view can typically be very hard to test due to dependencies on ASP.NET.<br /><br />The responsibility of the view is to render html, retrieve values from the html (really being the viewstate), and kicking of the flow (that is the way webforms work).<br /><br />The view is hidden by an interface to save the Presenter from knowing the gritty details of webforms. This way the presenter could also be used in another application that is not necessarily for the web.</div><div><br />The view initializes the presenter with a reference to itself - typically in the pageload event, but that really depends on the purpose of the page.</div><div><h4>Presenter</h4></div><div>The presenter is somewhat similar to the Controller in the MVC pattern, at least in the way I use it. It is not triggered in the same way as in MVC, though, as the view has to start it up.</div><div><br /></div><div>Basically, the presenter handles the flow of the page, receiving data from the view when an event occurs (a button is clicked for instance), using lower level constructs (like data-layers or services) to manipulate data and then typically asking the view to render something. I would never have a presenter function return a value, as it is solely up to the presenter to determine what the view should do (not how though).</div><div><br /></div><div>The presenter will get a reference to the view through the interface in the constructor.</div><div><br /></div><div>In .NET this leaves us with 5 pieces:</div><div>- A View (for instance SearchDogView) which inherits from&nbsp;System.Web.UI.Page.</div><div>- A template used for rendering html for the view (the ASPX file).</div><div>- An interface for the view (ISearchDogView).</div><div>- A presenter (SearchDogPresenter)</div><div>- A model (or 2 if we decide to use a ViewModel)</div><div><br /></div><div><br /></div><div><a href="http://nikolajkn.blogspot.dk/2012/09/maintainable-aspnet-webforms-part-ii.html"> Part II: A tiny example </a></div><div><br /></div><div><br /></div><div><br /></div><div></div><div><br /></div><div><br /></div></div>

]]></content>
  </entry>
  
</feed>
