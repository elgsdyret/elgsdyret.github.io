<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Developer's Perception]]></title>
  <link href="http://elgsdyret.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://elgsdyret.github.io/"/>
  <updated>2013-06-02T09:32:37+02:00</updated>
  <id>http://elgsdyret.github.io/</id>
  <author>
    <name><![CDATA[Nikolaj Kaare NÃ¸rskov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ Polyglot JavaScript]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/11/18/polyglot-javascript/"/>
    <updated>2012-11-18T13:14:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/11/18/polyglot-javascript</id>
    <content type="html"><![CDATA[<p>Over time JavaScript has gained a lot of traction as it is the default option for running code in the browser, and it has become a valid server option with the rise of node. This progress has largely been fueled by an arms race between the major browser vendor continuously trying to wield the fastest environment for running JavaScript.</p>

<p>Thus, as JavaScript can be run everywhere and with the notion that this language like any other has its rough spots (partly due to the history of it&rsquo;s creation, a notion supported by the famous book by Douglas Crockford &ldquo;JavaScript the Good Parts&rdquo;) it is no wonder that alternatives that compiles to JavaScript have been popping up for a while.</p>

<p>Microsoft recently released TypeScript to join the efforts of Google with their Dart language to define the future of code running in the browser. Simultaneously, initiatives like CoffeeScript (by J Ashkenas) has gained some traction and the community is working (fighting) to get the next version of JavaScript ready. Another option that I cannot leave out is ClojureScript a version of the brilliant Clojure language that compiles to JavaScript.</p>

<p>The options are abundant each with their own goals. Some like TypeScript and Dart aim to bring some form of static typing to the table (I do not specifically want this in JavaScript, but I still welcome these initiatives), while a language such as CoffeeScript aim to improve the syntax and hide some of the bad parts of JavaScript.</p>

<p>J Ashkenas (of BackBone, Underscore and CoffeeScript fame) maintains a quite comprehensive list (<a href="https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS</a>), and for a good read on the different aspect of languages compiling to JavaScript consider: <a href="http://buildnewgames.com/compiling-to-javascript/">http://buildnewgames.com/compiling-to-javascript/</a></p>

<p>Indeed it is a very good time to be a web (Node) programmer. Some notable JavaScript engineers (Such as N. Zakas) claim that time would be better spent improving JavaScript and teaching it than building alternatives, but I believe that every new language will bring inspiration to developers and to the future of JavaScript.</p>

<p>All of the languages compiling to JavaScript has a shared number of cons:</p>

<ul>
<li>Build process: Because they actually compile to JavaScript. Any serious JavaScript project will have a build process anyways, combining files, minifying, obfuscating, possibly running test suites automatically, and thus I do not see a big problem with this.</li>
<li>Debugging: Since what you are sending to the browser is JavaScript your debugging will also be in JavaScript. This means that unless you can get source map to work <a href="http://addyosmani.com/blog/the-breakpoint-episode-3-source-maps-shortcut-secrets-and-jsrun/">http://addyosmani.com/blog/the-breakpoint-episode-3-source-maps-shortcut-secrets-and-jsrun</a>, to use one of these languages you need to be fluent in JavaScript. Definitely, a challenge for some, but for experienced JavaScript developers this might not be a big problem (on a side note I believe that CoffeeScript for instance generates quite nice JavaScript).</li>
</ul>


<h3>CoffeeScript</h3>

<p>I have spend some energy on CoffeeScript as an alternative (or in addition to!) to JavaScript on my projects. I believe CoffeeScript brings readability and as a consequence of this also maintainability to a project. I cannot stress enough how important readability is for any piece of code and as such doing CoffeeScript to improve that becomes a very intriguing option.</p>

<p>One of the features about CoffeeScript that i most often hear complaints against is meaningful indentation, and it was also something I personally was not sure I would like. Nevertheless, the more I think about it, I am for using the indentation, as this is the way I consume code more than it is the braces. Why should the compiler use a different mechanism than me for interpreting code? Is it not easier to maintain code where your understand the code the same way the compiler does?</p>

<p>Here is just a few examples of features I believe adds readability to code:</p>

<p>Function syntax:</p>

<p><code>javascript
var a = function() { return x*x; };
</code></p>

<p><code>coffeescript
a = -&gt; x*x
</code></p>

<p>This especially becomes valuable if you like me use a lot of underscore.js functionality:</p>

<p><code>javascript
_([1, 2, 3]).each(function(num){ alert(num); });
</code></p>

<p><code>coffeescript
_([1, 2, 3]).each((num) -&gt; alert(num));
</code></p>

<p>Default values:</p>

<p>``` javascript
function(a, b) {</p>

<pre><code>if (!b) { 
    b = 'b';
} 
console.log(a, b);
</code></pre>

<p>}
```</p>

<p>In CoffeeScript you could do:</p>

<p><code>coffeescript
(a, b = 'b') -&gt; console.log(a, b)
</code></p>

<p>Basically, CoffeeScript is full of features that reduces the cluttering of your code removing unnecessary noise and thereby improving readability.</p>

<p>I could whip up a ton more examples, but instead if will just point you to <a href="http://coffeescript.org/">http://coffeescript.org/</a> where you can read more if your interested. No need for me to copying all the examples :-D</p>

<p>Recently, I converted a JavaScript project to CoffeeScript and I litterally ended up removing one third of all the characters just in the conversion. Afterwards, I spends some time using some of the nice features such as default values for parameters and splats, and consequently was able to reduce the amount of code even more.</p>

<p>It is indeed a good time to be a polyglot JavaScript developer and I cheer every single time a new language can compile to JavaScript &ndash; bring it on!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js First Experiences]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/04/09/nodejs-first-experiences/"/>
    <updated>2012-04-09T10:51:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/04/09/nodejs-first-experiences</id>
    <content type="html"><![CDATA[<p>The last 3 months or so I have been busy working on a new backend built in node with mongo as the database. It has been lots of fun, with some frustration, and lots of heureka moments.</p>

<p>This is my attempt at describing those experiences, some good and some bad.</p>

<p>The two many reasons we opted to work with node was the following:</p>

<ul>
<li>Development speed, due to the simplicity of node and using the same language in both client and server.</li>
<li>Performance, most of the information we found indicated that we could easier get more performance from using node than the alternative of ASP.NET.</li>
</ul>


<h3>Development Speed</h3>

<p>It seems like the development speed has indeed been increased, but in reality we cannot really measure before we build the next module on top of node. Our first module has also been the proving grounds for the technology stack, as the maturity of the technology means there is not so much information to find on how to write the best node code. Thus, the progress has most likely been slower than what we can expect in the future (yet I still believe I have seen an improvement compared to old projects).</p>

<h3>Same Language</h3>

<p>So node being javascript, it is in fact the same language is we use in our browser client (built on top of backbone). But, due to the fact that node does not work in the same way as the browser with regards to the code it is not completely trivial to share code between server and client.</p>

<p>A given file containing a function in node would have to use</p>

<p><code>javascript
module.exports = myFunction;
</code></p>

<p>To expose it to being available for use elsewhere. In addition this file would have to be required for the code to actually be used elsewhere. One could argue this is much better than the browser where the same function would probably be attached to some global object (pretending to be a namespace).</p>

<p>To give an example of how one could implement code usable for both browser and node, I have taken the liberty of showing a snippet from the brilliant underscore library doing exactly this:</p>

<p>``` javascript
if (typeof exports !== &lsquo;undefined&rsquo;) {</p>

<pre><code>if (typeof module !== 'undefined' &amp;&amp; module.exports) {
    exports = module.exports = _;
</code></pre>

<p>   }
   exports.<em> = </em>;
} else</p>

<pre><code>root['_'] = _;
</code></pre>

<p>}
```</p>

<h3>Cross OS Platform</h3>

<p>Having a cross OS platform gives us more freedom in which development machines to use and servers to run in production, which also gives us more freedom regarding hosting partners, whether in the cloud or not. Actually, all the developers are working on windows, as we have found the Webstorm IDE to be the best tool by far, and it does not work well on linux (when that linux is a virtual box at least.</p>

<p>Running development on windows and production on linux has not been without problems though. The node core is equally good on both OS, but some of the modules we have used have not been properly tested on windows. Additionally, the windows file system is case insensitive, while it is case sensitive on linux, which has led to one error deployment so far.</p>

<h3>Pyramid of Doom</h3>

<p>Much have been written about the problems the callback nature of most node api&rsquo;s lead to. Our solution has been to mainly use function hoisting:</p>

<p>Nested:</p>

<p>``` javascript
getSomeData(err, function(err, callback){</p>

<pre><code>doSomeStuff(err, function() {
});
</code></pre>

<p>});
```</p>

<p>Hoisted:</p>

<p>``` javascript
getSomeData(err, dataRetrieved);</p>

<p>function dataRetrieved(err, callback) {</p>

<pre><code>doSomeStuff(err, someStuffDone);
</code></pre>

<p>}</p>

<p>function someStuffDone() {}
```</p>

<p>This is working ok for scenarios where we have a fixed depth of nesting of functions (the example with 2 above is not a bad pyramid of doom by the way &ndash; try throwing in a couple of more levels of nesting and you will see the problem). Unfortunately, this method does not work with a dynamic level of nesting (think an array of functions generated and to be called in sequence), and this is where a library such as Async can help.</p>

<p>Solving the pyramid of doom this way has not been without challenges, as there have been arguments about using Async or similar library even with a fixed amount of nesting. My standing on this is that code written with Async in that scenario (fixed level of nesting) is much harder to read, understand, and reason about.</p>

<h3>Express and middleware</h3>

<p>Like most developers doing services in node exposed on the web, we have chosen the express web framework. There are a lot of features built into express, and to be honest we only use a fraction of them. Mainly the middleware stack (from the connect sub module) has been used for good, but certainly also for bad.</p>

<p>Cross cutting concerns like logging, authorization, and gzipping are all examples where benefit can be reaped from the stack and it is easy to apply a certain behaviour to all requests and responses. Unfortunately, the ease of implementation has lead to data access and business logic being implemented as middleware. This went well for a while, but it is harder to reuse and test the middleware as they are dependent on the (request, reponse, next) &ndash; triple of arguments, as opposed to business relevant objects.</p>

<p>Thus, we are moving towards not using middleware for data access and business logic, having one function, registered as middleware, for each end-point which then delegates to business and data oriented modules.</p>

<h3>Require (Cyclic)</h3>

<p>As we move along and introduce more files and more modules, I have noticed a tendency to let all dependencies be resolved with require. This leads to some scenarios where we have fairly low level functionality (such as configuration api) require high level functionality (the user module). This easily leads to cyclic require loops, causing bugs that can be hard to resolve. Like any software it is good practise also in node to let high level functionality depend on low level functionality &ndash; not the other way.</p>

<p>The solution to reusing bits is, as with many frameworks, to divide and conquer. If a high level module contains a function that would be really usable in a low level module, extract it in a seperate module and break the cycle that way.</p>

<h3>Return Callback</h3>

<p>Just an observation on the nature of some of the node code I have been writing recently:</p>

<p>``` javascript
function doSomeStuff(err, callback) {</p>

<pre><code>if (err) {
    callback(err, 'bad stuff happened');
}
callback(null, 'wuhuuuu bad stuff did not happen');
</code></pre>

<p>}
```</p>

<p>Did you find the bug? This is the most simple example I could come up with, but when it gets a bit more complex I find myself forgetting the return statement in front of the first callback, leading to some funky debugging session:</p>

<p>``` javascript
function doSomeStuff(err, callback) {</p>

<pre><code>if (err) {
    return callback(err, 'bad stuff happened');
}
callback(null, 'wuhuuuu bad stuff did not happen');
</code></pre>

<p>}
```</p>

<p>Maybe it is just a quirk of how many brain process the code, but consider yourself warned! ;-D</p>

<h3>Simplicity</h3>

<p>This is the one point where I believe node really shows its strength, it is dead simple to implement a server. Recently, we had a potential candidate who had written the server part of his test in less than 100 lines of coffee-script, and I really think this says it all.</p>

<h3>Performance</h3>

<p>I have written a lot about my experiences with developing on node, and very little regarding the awesome earth-shattering speed of node.</p>

<p>Some claim that the way node works (event-loop and such) is the coolest thing since the invention of the wheel, while others claim that it is borderline stupid. I am not going to join that discussion, but just tell that what I have seen so far and the experiments done show that node is indeed fast, and also faster than what we did before. That being said our team does not have good large scale measurements or experiments of our own to prove this.</p>

<p>Is node the best choice available for us? Maybe, it could be, but at least until now it has proven to be a very good choice.</p>
]]></content>
  </entry>
  
</feed>
