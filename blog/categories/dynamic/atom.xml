<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dynamic | Developer's Perception]]></title>
  <link href="http://elgsdyret.github.io/blog/categories/dynamic/atom.xml" rel="self"/>
  <link href="http://elgsdyret.github.io/"/>
  <updated>2013-06-02T09:32:37+02:00</updated>
  <id>http://elgsdyret.github.io/</id>
  <author>
    <name><![CDATA[Nikolaj Kaare NÃ¸rskov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing With the dynamic Keyword]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/03/24/playing-with-dynamic-keyword/"/>
    <updated>2013-03-24T09:28:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/03/24/playing-with-dynamic-keyword</id>
    <content type="html"><![CDATA[<p>I have not yet had a chance to play around with the dynamic features that was introduced with .NET 4, probably because I have yet to find a good scenario for using it and probably because I am mostly stuck on doing work on the .NET 3.5.</p>

<p>Fortunately, I am currently working on a new REST API build in Nancy and the dynamic features of .NET 4 seems perfect to implement HTTP PATCH.</p>

<p>Our way of thinking is that it is hard to model with traditional classes as not all properties are necessarily included. One solution could be to make them all nullable and use that, but then it would not be possible for us to distinguish between a property simply not in the body of the request and a property the consumer deliberately set to null.</p>

<p>My first test was like this:</p>

<p>``` c#
public void DynamicValueNoneSet()
{</p>

<pre><code>dynamic a = new ExpandoObject();   
string name = a.Name;   
</code></pre>

<p>}
```</p>

<p>This showed me that I would get a RunTimeBinderException if a given value was not available (yes I could also have read the documentation, but how much fun is that?).</p>

<p>My next attempt included this little implementation of DynamicObject &ndash; to avoid getting the exception when using it:</p>

<p>``` c#
public class NullDynamic : DynamicObject
{</p>

<pre><code>private readonly IDictionary&lt;string, object&gt; expando;    

public NullDynamic()   
{     
    expando = new ExpandoObject();   
}    

public override bool TryGetMember(GetMemberBinder binder, out object result)   
{     
    expando.TryGetValue(binder.Name, out result);     
    return true;      
}    

public override bool TrySetMember(SetMemberBinder binder, object value)   
{     
    expando[binder.Name] = value;     
    return true;   
} 
</code></pre>

<p>}
```</p>

<p>Since the declared goal is to be able to distinguish between a value not being there and deliberately being set to null, this would not work either.</p>

<p>Actually what I found myself thinking was that I missed the &ldquo;undefined&rdquo; value from javascript, or some other way to express that something was not there, built into the language.</p>

<p>Trying to avoid going to such drastic measure I came up with this:</p>

<p>``` c#
public class Dynosaur: DynamicObject
{</p>

<pre><code>private readonly IDictionary&lt;string, object&gt; expando;    

public Dynosaur()   
{    
    expando = new ExpandoObject();   
}    

public override bool TryGetMember(GetMemberBinder binder, out object result)   
{    
    return expando.TryGetValue(binder.Name, out result);      
}    

public override bool TrySetMember(SetMemberBinder binder, object value)   
{    
    expando[binder.Name] = value;    
    return true;      
}    

public bool HasValue(string name)   
{    
    return expando.Keys.Contains(name);   
} 
</code></pre>

<p>}
```</p>

<p>Maybe not the most elegant solution, but I does allow me to write code like:</p>

<p>``` c#
public void PrintName(dynamic a)
{</p>

<pre><code>if (!a.HasValue("Name"))
{
    a.Name = "dog";
}
Console.WriteLine("the name is: " + a.Name);
</code></pre>

<p>}
```</p>

<p>Given that &ldquo;a&rdquo; is actually an instance of my Dynosaur class. I would not say that I am entirely satisfied with this implementation, but I actually think that this is as far as the dynamic features of C# will take me.</p>

<p>Any good ideas out there? I am thinking there must be other people that has played around with this and has come up some crazy dynamic stuff in C#.</p>
]]></content>
  </entry>
  
</feed>
