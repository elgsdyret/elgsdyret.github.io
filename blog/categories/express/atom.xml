<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: express | Developer's Perception]]></title>
  <link href="http://elgsdyret.github.io/blog/categories/express/atom.xml" rel="self"/>
  <link href="http://elgsdyret.github.io/"/>
  <updated>2013-05-27T20:58:10+02:00</updated>
  <id>http://elgsdyret.github.io/</id>
  <author>
    <name><![CDATA[Nikolaj Kaare NÃ¸rskov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js When The Honeymoon is Over]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/06/01/nodejs-when-honeymoon-is-over/"/>
    <updated>2012-06-01T05:33:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/06/01/nodejs-when-honeymoon-is-over</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />Since the beginning of the year I have been working on building a new REST based API to be consumed by both internal and external clients in <a href="http://nodejs.org/">Node.js</a>.<br /><br />The main reason for choosing node and mongo as the main elements in our stack when we started the project was to alleviate a number of pains we experienced with the "old" stack of ASP.NET and SQL. Most of this was related to the amount of ceremony that goes in to doing even simple stuff on that stack, which was being made worse by the way the technologies were used. Most if not all of these pains were indeed alleviated, but we gained a couple of new ones, which can be mitigated to some extend.<br /><br /><h4>Debugging and Stack Trace</h4>Having spent many hours the last couple of weeks debugging errors in an application with a codebase that is gaining in size I have come to the conclusion that simply put, the debugging and stack trace in node is&nbsp;inferior to what you would get in a .NET based environment.<br /><br />I have found some of the error messages to be short non descriptive and very generic, making it often fairly hard to understand what is going on. Likely, it is a consequence of the lack of maturity of the technology combined with the lesser experience I have with it, but reading a stack trace in .NET would often mean I know exactly what the problem was, which is not the case with node.<br /><br />Probably, the callback nature of most of the API's also is somewhat to blame for this.<br /><br />Most of these challenges can be minimized with a good and solid&nbsp;test suite, as it can help pinpoint more precisely where an error has&nbsp;occurred.<br /><br />A nice little addition to this is that the dynamic nature of the language means simple spelling mistakes in parts of the program that is not executed by tests (bad!) will not get caught. This is an easy problem to fix though - apply <a href="http://www.jshint.com/">J<span id="goog_981159054"></span><span id="goog_981159055"></span>SHint</a>, <a href="http://www.jslint.com/">JSLint</a>, or similar (do it from day one, you owe it to yourself).<br /><br />I tried to find a good "bad" error message to put here, but could not easily provoke one intentionally. Will keep a look out for it and make a new post next time I find a good one.<br /><br /><h4>Integration vs Unit Tests -&nbsp;Design and Architecture</h4>The way our application is designed means it is mostly implemented using <a href="http://expressjs.com/">express</a>&nbsp;middleware stack with a little bit of business logic sprinkled here and there. We quickly discovered that this was probably not the best architecture, but still have some leftovers and we have had some challenges to write code that can be unit tested in a meaningful way (without a ton of mocks and fake objects being build).<br /><br />This is mainly a design challenge and not a consequence of node, nor javascript, but it has lead to a side effect. Because the "units" are not easily testable, a large percentage of the codebase is mainly tested with integration style tests using "<a href="https://github.com/danwrong/restler">restler</a>" (I would actually recommend using "<a href="https://github.com/mikeal/request">request</a>" instead). These tests are as good or even better than unit tests to find errors, but (un)fortunately the error data returned from our API does not give me enough information to pinpoint what goes wrong.<br /><br />Thus, the conclusion I have come to is that the middleware should be extremely thin and always defer the bulk of the implementation to another module that can tested. This goes both for middleware implementing cross-cutting concerns and the actual end-point implementation.<br /><br />The platform does not have a large body of known design patterns for implementing maintainable applications. This easily leads to developers trying out a lot of different approaches with different merits and flaws, which means the codebase could suffer from inconsistencies making it hard to maintain.<br /><br /><h4>Hosting</h4>Figure out very early how you are going to host this. If you are going for a cloud based hosting vendor and you are based in the States, there is a number of options.<br /><br />The same options are available in Europe, but from the States, leading to a latency challenge. Trying to get a solid agreement with a hosting partner in Europe has been hard and we have been forced to settle for a worse agreement that we would like.<br /><br />The good part is that due to the traction of the platform almost everyday a new option pops up, and we can always fallback to running off amazon or azure and managing the setup ourselves.<br /><br /><h4>Picking the right Stack</h4>Node.js has been gaining a lot of traction and combined with some of the prime modules it is in general a very nice stack for building the kind of API we are building. I would pick it again if I had to make the choice again today, but this time with the knowledge of what is brings.<br /><br />It has taken longer, and been harder than expected (was almost expected), but we are getting close to being done and can reflect upon what worked and what did not work.<br /><br /><ul><li>Get JSHint or JSLint up and running (as early as possible).</li><li>Get CI up and running (as early as possible) - not after 4 months when you are trying to finish up the project.</li><li>The design and architecture is really important - do not let the speed with which you can whip up new features keep you from worrying about this. Design for tests that can tell you what is wrong with the application when changes are being made.&nbsp;</li><li>Decide as early as possible on standards (to enforce the design and architecture decisions), and make sure the application follows these before moving on. I would recommend starting out with the revealing module pattern, hoisted functions for callback nesting, avoiding control flow libraries such as <a href="https://github.com/caolan/async">async</a>, avoiding inheritance, considering every used external module very carefully, and most importantly keeping it dead simple.&nbsp;</li><li>Start out with testing hosting setups from day one:</li><ul><li>Deploy your app to different platform as service vendors, such as:</li><ul><li><a href="http://www.heroku.com/">Heroku</a></li><li><a href="http://nodejitsu.com/">Nodejitsu</a></li></ul><li>Deploy your app to amazon or similar - if nothing else to get an idea of how the server actually work and what is required.</li><li>Use these experiments to figure out how you want to run your application in production. Figure out which are "real" requirements and which are nice to have.&nbsp;</li></ul><li>Consider before you start whether to use <a href="http://coffeescript.org/">CoffeeScript</a>&nbsp;or javascript to write the application. It might seem like a straight forward choice to you, but at least do yourself the favor of spending just a little bit of time researching.</li></ul><br />Happy coding. <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js First Experiences]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/04/09/nodejs-first-experiences/"/>
    <updated>2012-04-09T10:51:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/04/09/nodejs-first-experiences</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><br />The last 3 months or so I have been busy working on a new backend built in node with mongo as the database. It has been lots of fun, with some frustration, and lots of heureka moments.<br /><br />This is my attempt at describing those experiences, some good and some bad.<br /><br />The two many reasons we opted to work with node was the following:<br /><br /><ul><li>Development speed, due to the simplicity of node and using the same language in both client and server.</li><li>Performance, most of the information we found indicated that we could easier get more performance from using node than the alternative of ASP.NET.</li></ul><br /><br /><span style="font-size: large;">Development Speed</span><br />It seems like the development speed has indeed been increased, but in reality we cannot really measure before we build the next module on top of node. Our first module has also been the proving grounds for the technology stack, as the maturity of the technology means there is not so much information to find on how to write the best node code. Thus, the progress has most likely been slower than what we can expect in the future (yet I still believe I have seen an improvement compared to old projects).<br /><br /><b>Same Language</b><br />So node being javascript, it is in fact the same language is we use in our browser client (built on top of backbone). But, due to the fact that node does not work in the same way as the browser with regards to the code it is not completely trivial to share code between server and client.<br /><br />A given file containing a function in node would have to use<br /><br /><pre class="brush: javascript">module.exports = myFunction; </pre><br />To expose it to being available for use elsewhere. In addition this file would have to be required for the code to actually be used elsewhere. One could argue this is much better than the browser where the same function would probably be attached to some global object (pretending to be a namespace).<br /><br />To give an example of how one could implement code usable for both browser and node, I have taken the liberty of showing a snippet from the brilliant underscore library doing exactly this:<br /><pre class="brush: javascript">if (typeof exports !== 'undefined') {<br />   if (typeof module !== 'undefined' &amp;&amp; module.exports) {<br />       exports = module.exports = _;<br />   }<br />   exports._ = _;<br />} else <br />   root['_'] = _;<br />}<br /></pre><b><br /></b><br /><b>Cross OS Platform</b><br />Having a cross OS platform gives us more freedom in which development machines to use and servers to run in production, which also gives us more freedom regarding hosting partners, whether in the cloud or not. Actually, all the developers are working on windows, as we have found the Webstorm IDE to be the best tool by far, and it does not work well on linux.<br /><br />Running development on windows and production on linux has not been without problems though. The node core is equally good on both OS, but some of the modules we have used have not been properly tested on windows. Additionally, the windows file system is case insensitive, while it is case sensitive on linux, which has led to one error deployment so far.<br /><br /><b>Pyramid of Doom</b><br />Much have been written about the problems the callback nature of most node api's lead to. Our solution has been to mainly use function hoisting:<br />Nested: <br /><pre class="brush: javascript">getSomeData(err, function(err, callback){<br />   doSomeStuff(err, function() {<br />   });<br />});<br /></pre>Hoisted: <br /><pre class="brush: javascript">getSomeData(err, dataRetrieved);<br /><br />function dataRetrieved(err, callback) {<br />   doSomeStuff(err, someStuffDone);<br />}<br /><br />function someStuffDone() {<br />}<br /></pre>This is working ok for scenarios where we have a fixed depth of nesting of functions (the example with 2 above is not a bad pyramid of doom by the way - try throwing in a couple of more levels of nesting and you will see the problem). Unfortunately, this method does not work with a dynamic level of nesting (think an array of functions generated and to be called in sequence), and this is where a library such as Async can help.<br /><br />Solving the pyramid of doom this way has not been without challenges, as there have been arguments about using Async or similar library even with a fixed amount of nesting. My standing on this is that code written with Async in that scenario (fixed level of nesting) is much harder to read, understand, and reason about.<br /><br /><b>Express and middleware</b><br />Like most developers doing services in node exposed on the web, we have chosen the express web framework. There are a lot of features built into express, and to be honest we only use a fraction of them. Mainly the middleware stack (from the connect sub module) has been used for good, but certainly also for bad.<br /><br />Cross cutting concerns like logging, authorization, and gzipping are all examples where benefit can be reaped from the stack and it is easy to apply a certain behaviour to all requests and responses. Unfortunately, the ease of implementation has lead to data access and business logic being implemented as middleware. This went well for a while, but it is harder to reuse and test the middleware as they are dependent on the (request, reponse, next) - triple &nbsp;of arguments, as opposed to business relevant objects.<br /><br />Thus, we are moving towards not using middleware for data access and business logic, having one function, registered as middleware, for each end-point which then delegates to business and data oriented modules.<br /><br /><b>Require (Cyclic)</b><br />As we move along and introduce more files and more modules, I have noticed a tendency to let all dependencies be resolved with require. This leads to some scenarios where we have fairly low level functionality (such as configuration api) require high level functionality (the user module). This easily leads to cyclic require loops, causing bugs that can be hard to resolve. Like any software it is good practise also in node to let high level functionality depend on low level functionality - not the other way.<br /><br />The solution to reusing bits is, as with many frameworks, to divide and conquer. If a high level module contains a function that would be really usable in a low level module, extract it in a seperate module and break the cycle that way.<br /><br /><b>Return Callback</b><br />Just an observation on the nature of some of the node code I have been writing recently:<br /><pre class="brush: javascript">function doSomeStuff(err, callback) {<br />     if (err) {<br />        callback(err, 'bad stuff happened');<br />     }<br />     callback(null, 'wuhuuuu bad stuff did not happen');<br />}<br /></pre>Did you find the bug? This is the most simple example I could come up with, but when it gets a bit more complex I find myself forgetting the return statement in front of the first callback, leading to some funky debugging session:<br /><pre class="brush: javascript">function doSomeStuff(err, callback) {<br />     if (err) {<br />        return callback(err, 'bad stuff happened');<br />     }<br />     callback(null, 'wuhuuuu bad stuff did not happen');<br />}<br /></pre>Maybe it is just a quirk of how many brain process the code, but consider yourself warned! ;-D<br /><br /><b>Simplicity</b><br />This is the one point where I believe node really shows its&nbsp;strength, it is dead simple to implement a server. Recently, we had a potential candidate who had written the server part of his test in less than 100 lines of coffee-script, and I really think this says it all.<br /><br /><span style="font-size: large;">Performance</span><br />I have written a lot about my experiences with developing on node, and very little regarding the awesome earth-shattering speed of node.<br /><br />Some claim that the way node works (event-loop and such) is the coolest thing since the invention of the wheel, while others claim that it is borderline stupid. I am not going to join that discussion, but just tell that what I have seen so far and the experiments done show that node is indeed fast, and also faster than what we did before. That being said our team does not have good large scale measurements or experiments of our own to prove this.<br /><br /><br />Is node the best choice available for us? Maybe, it could be, but at least until now it has proven to be a very good choice.<br /><br /></div>

]]></content>
  </entry>
  
</feed>
