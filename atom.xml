<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Developer's Perception]]></title>
  <link href="http://elgsdyret.github.io/atom.xml" rel="self"/>
  <link href="http://elgsdyret.github.io/"/>
  <updated>2013-05-31T13:12:05+02:00</updated>
  <id>http://elgsdyret.github.io/</id>
  <author>
    <name><![CDATA[Nikolaj Kaare NÃ¸rskov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Porting to Octopress]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/05/27/porting-to-octopress/"/>
    <updated>2013-05-27T19:16:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/05/27/porting-to-octopress</id>
    <content type="html"><![CDATA[<p>Just  testing out the octopress blogging engine. I am considering moving away from blogger, mostly to enable me to write in markdown (I am not a fan of editing in the browser) and to get the control of whats going one.</p>

<p>Sofar it has been easy enough to get working, but I imagine it will require quite a bit of work to set it up completely as my main blogging outlet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Generation in .NET]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/05/25/code-generation-in-net/"/>
    <updated>2013-05-25T12:39:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/05/25/code-generation-in-net</id>
    <content type="html"><![CDATA[<p>Code generation has over time turned into one of my pet peeves when working in .NET (although most of it will apply to similar platforms like JAVA). Let me be very clear from the beginning of this post. I am advocating that you should use extreme caution before even considering using code generation to solve whatever real or perceived problems you might find it useful for. I have yet to see an implementation that has not caused extra problems. That does not necessarily mean that it cannot be valuable tool, but please take a step back and think before continuing down that path.</p>

<blockquote><p>This is the longest blog post I have yet written. It contains no code, just ranting, and hopefully some insights.</p></blockquote>

<h2>Possible Motivation</h2>

<p>Code generation is typically introduced to:</p>

<ul>
<li>remove duplication.</li>
<li>reduce tedious coding.</li>
<li>enforce security measures (authentication and authorization).</li>
<li>enforce consistent handling of resources such as database connections and transactions.</li>
<li>apply cross cutting concerns such as logging or caching.</li>
</ul>


<p>And probably a number of other reasons. Basically, anything that seems hard to do in a nice way in the language and framework you are currently working with. Most of these things can be handled by using more light weight measures, using more simple and well known designs based on patterns.</p>

<p>Regarding tedious coding it would be wise to step back and consider why there is so much tedious coding? If the number of lines of code compared to the functionality it provides is so high that you consider using code generation, I would put it to you that your design is not very good. Basically, you are trying to hammer a square peg into a round hole, and instead of seeing the error of that you just get a bigger hammer (called code generation).</p>

<h2>How to Determine what to Generate</h2>

<p>Usually, you would determine what to generate based on an external resource (like XML files), examining the existing code structure using the reflection API, or annotating the existing code somehow (probably using attributes) and then examining that using the reflection API.</p>

<p>No matter how you choose to do this you are defining rules that are not clear from the context. An XML file is a very loose format and what is generated from that XML file is by no means clear to a developer looking at that XML, and it can also be very hard to determine from the code of the code generator. Similar problems arise when using the existing code structure or attributes, it is simply not very clear what rules are being applied and how the resulting code will look.</p>

<p>Step back and consider the number of characters in those XML files. Now consider the number of characters of the code if you wrote it by hand in the same way the code generator does it. Now consider the number of characters for the code of the generator. Often you will find that you end up with more characters using the XML than just using the code. Then consider that XML files cannot be unit tested, the build process will be more complicated, and you will have to actually write the code generator.</p>

<p>If you determine what to generate based on examining the existing code you will introduce the problem of simple code changes causing an unwanted side effect. I still recall changing the name of a parameter in a function in a model class as it was misspelled. Compilation and tests worked fine as they should. What I did not foresee was that suddenly our public API had a breaking change as it was generated from the core model. Our public SDK had suddenly also introduced this change as it was also generated from the code models. So basically all our integration partners had to change their code, or we could rollback the release. I know this is an extreme scenario and probably not something you would ponder, but there really is no limit for the ingenuity (insanity) of developers when trying to solve problems.</p>

<blockquote><p><em>If you end up doing code generation despite all my attempts to get you to move away from it, do work dilligently on creating and maintaining documentation for you base generation format, whether it is XML based, annotations, or the structure of the code.</em></p></blockquote>

<h2>How to Actually Generate the code</h2>

<p>Once the motivation is in place and you have somehow figured out how to determine what the output code should look like, it is time to actually generate some code.</p>

<p>There are a number of different tools for doing this in the .NET stack, but all of them basically falls into to different categories:
 + generate by code API (such as the CodeDOM)
 + generate by template (such as T4 templates)</p>

<p>Using code to generate code is a feasible approach, but unfortunately the APIs in .NET for this are extremely cumbersome and verbose leading to a lot of incomprehensible code. For instance the combination of CodeDOM and reflection (for reading base format) leads to some of the least readable code I have ever encountered in .NET. This basically means that it is very hard to envision the resulting code from the generator, which leads to random experimentation followed by examination of the resulting code to verify changes (if possible).</p>

<p>Using a template engine is a better alternative. The templates will most likely be a raw text format with placeholders for the code that has variation. This means it is a lot easier to envision the resulting code. Usually, the placeholders should be fairly few, otherwise, the reusability is very low and the code generation should probably never have been implemented at all.</p>

<blockquote><p><em>Use a template based engine and put as much as the generation logic in the template.</em></p></blockquote>

<p>There is an alternative where you generate the code based on a 3rd party solution, such as PostSharp. In this scenario it is the 3rd party that defines the &lsquo;how to determine what to generate&rsquo; and maintain most of the documentation.</p>

<blockquote><p><em>Do not start from scratch. Search the market for generation tools that can do the bulk of the lifting for you.</em></p></blockquote>

<h2>Build Process</h2>

<p>Once the code is generated there is a number of ways it can interact with the rest of the codebase:</p>

<ol>
<li>never generate a file just build it straight into a DLL</li>
<li>generate a temp file as part of build and delete it afterwards</li>
<li>generate a temp file and try to hide it from the developers (the folder it is in is not included in the project etc.)</li>
<li>generate a temp file and use it in build (the build is seperate step from generation).</li>
<li>only generate the code on demand and check it in with the rest of the code.</li>
</ol>


<p>The distinction between these methods can seem very narrow. The important part is whether the generated code is an artifact of the build process and how easy it is to see for the developers.</p>

<p>The first 3 options basically assumes that it is not a good thing if the developer can see and modify the generated code. As if bad stuff would come from that, which it might.</p>

<p>The last 2 assumes that the generated code is not directly an artifact from the build process. Item 4 is not that different from 1-3, but at least it keeps the code generation step as a seperate step from the build process. This could be a pre process step in building with Visual Studio and the actual build just picks up the file from the project.</p>

<p>Item 5 is basically a templating engine. You generate something once and it is perfectly acceptable to modify it afterwards. This is just like when you add a class file in Visual Studio it will have a bit of code prefilled such as namespace, classname, and useless using statements. Similarly, with very simple commands you can generate new controllers and models in RAILS.</p>

<blockquote><p><em>Make sure the build process is not made more complicated (and slower) due to the code generation. Ensure that the code generation is an optional step that comes before the build. Consider only generating once and keeping the files in source control if feasible.</em></p></blockquote>

<h2>Examples</h2>

<p>I am just going to run through some of the examples of code generation I have encountered sofar. One is bad, but ultimately not that harmful, two have been extremely costly, and one is maybe ok.</p>

<h4>Re-use of Internal Model in Other Services</h4>

<p>The first example of a custom code generator I encountered was used to share models between a number of different services. Basically, the team had decided to go for a SOA design, but not really unstood how to implement it. It was a relatively simple business application consisting of a an ASP.NET webforms site and no less than 12 SOAP based web services.</p>

<p>We eventually came to the conclussion that probably 3 services would have been just about right, as the services depended on each other to a large degree. The sheer work of maintaining a model that belonged in service A, but was used in service B, service C, and the website quickly became a pain with 12 services. Thus, a code generator had been build to generate these models, making this an example of bad design driving the creation of the code generator.</p>

<p>Luckily, the simplicity of the generated classes, the ease with which they could be extended, and the simplicity of the code generator itself ensured that it was only slightly cumbersome to work with.</p>

<h4>Custom ORM NHibernate Wrapper</h4>

<p>I could write a series of blog posts on this example alone, but basically this backend system was designed by someone that considered code generation his speciality and consequently applied it to everything possible.</p>

<p>Combine this with a desire to build a custom ORM and you get one of the most convoluted systems I have seen. Basically, more or less the entire backend system was generated from XML. The idea of the homemade ORM was eventually dropped, but its basic API was then used to wrapped NHibernate. So as a developer you are basically stuck with a homemade XML format for queries and entities, which was the used to generate mapping and queries for NHibernate. Due to the complexity of such a system the queries and the mapping are highly ineffective.</p>

<p>The worst part was how hard it was to actually write any kind off meaningful code for the system. The generated entities and queries (called views) were hidden and impossible to extend, actually, the only intended way to implement business logic was static methods were everything was passed as parameters. Some of the hacks developers had implemented on top of this system to be able to deliver features only made it worse.</p>

<p>To top off the problems with this code generation it was full of bugs and very hard to modify. Part of the code generator was even code generated.</p>

<p>Possibly the worst design I have ever seen. For a relatively simple business domain and equally simple functionality.</p>

<h4>Service Layer Method Generator</h4>

<p>This is another example of a very complex code generation system. I cannot be completely certain of the motivation for this code generation system, but my guess is that it is yet another example of a bad design that caused a lot of manual work.</p>

<p>The core of the system is a number of entities, build by hand and mapped with NHibernate. The entities have specific queries as static method in an Active Record style. This design in itself is not that bad. One could argue back and forth of the merits of Active Record compared to the Repository pattern, but at least it is a well known and tried pattern.</p>

<p>Based on the methods, properties, and certain custom attributes of these entities a number of things were code generated (which was not documented ofcourse):</p>

<ul>
<li>A service layer directly exposing all the public methods of the webservice. In this service layer certain cross cutting concerns was added, such as connection and transaction handling, exception handling, and security checks.</li>
<li>A number of classes that was build into a .NET based SDK.</li>
</ul>


<p>The idea behind the .NET based SDK was that it should work in a RPC style, and it contained both proxy objects and data objects directly generated based on the data retrieved from the core entities. In itself exposing internal implementation details in this way is never a good idea. As a direct consequence of this I have introduced a bug by changing the naming of a function parameter, which reflected through the service layer and the SDK. This meant that consumers of the API suddenly experienced a breaking change.</p>

<p>Nevertheless, the main problem stems from the design. The way the proxy object works in the SDK is that it does not contain any data. This means if for instance you access the name property of a customer object you will end up going over the wire to retrieve this data. Obviously, this leads to extremely chatty behaviour by the consumers of the SDK and eventhough it is possible to avoid it is not the perceived default. The main problem though is that 50 or so entities with an average of 10 properties leads to 50 X 10 X 2 (both get and set) = 1000 methods on the service layer to implement the proxy object (could have been done with a PATCH like operation for partially updates, but alas it is not). With the standard methods for entities (create, update, delete) and some queries the API ends up having approximately 1500 public methods.</p>

<p>I have removed the code generation completely and changed every method to be a &lsquo;method as an object&rsquo; implementation. Combined with the template pattern this means that there is very little redundant code. Unfortunately, it does not change the fact that we have 1500 public methods, which is a nightmare to maintain for us, and equally bad for our consumers to understand and navigate. Fans of the code generation in question would probably argue that it is only a problem to maintain, because the code generation has been removed, and they would be partially right. But, taking into account the number of bugs in the code generation and the number of well hidden side effects I am very happy we got rid of it.</p>

<blockquote><p><em>When a design decision leaves you with 1500 different methods on a public API, you should really consider whether this design is a good idea</em></p></blockquote>

<h4>AOP Support</h4>

<p>This last example is actually one I designed myself. In a relatively simple ASP.NET MVC application we use attributes to implement AOP support using PostSharp. This actually works very well as PostSharp has a fairly straightforward API and there is no side effect by changing the code (all is handled by annotating with attributes).</p>

<p>It is used for a number of things:</p>

<ul>
<li>checking function parameters for null</li>
<li>checking function parameters for certain values</li>
<li>checking security rights on controller actions</li>
</ul>


<p>I am not sure I would implement it this way again. The addition of the PostSharp tool does add a level of complexity and the fact that it must be installed on each and every developer machine also makes it a pricy dependency.</p>

<p>Alternatively, each controller action could have been implemented as a &lsquo;method as an object&rsquo; and used template pattern to achieve similar results. Or maybe just do it by hand, it is not like the size of the application made it that much work. Basically, it probably is an example of overengineering that I am responsible for.</p>

<h3>Challenges</h3>

<p>There are a number of general challenges with using code generation:</p>

<ul>
<li>It makes the system inherently a lot more complex.</li>
<li>It reduces readability quite a bit.</li>
<li>It makes it hard to implement business logic. The required features will be hard to determine up front, and thus the code generator will not correctly accomodate them. This leads to hacks to work around the code generator.</li>
<li>The APIs in .NET that are often used for this really sucks. If you really want to create code that is very hard to read, just combine CodeDOM code generation with the reflection API.</li>
</ul>


<p>There are a some challenges that will get harder without code generation. What if you have 1500 command classes that needs to be changed? Depending on the change it could be put in a base class (if one is available), but if this is not possible it will be a harder challenge.</p>

<p>How do you change 1500 classes by hand? One option is hiring a lot of very cheap labour to do it for you, but more constructively it is also feasible to create a script that does the modification and is then thrown away, which was how they were generated in the first place.</p>

<blockquote><p><em>I have yet to see a really good example of code generation. Even those provided by visual studio, the RAILS framework, or similar, are at best minor convenience functionality.</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Go]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/05/02/getting-started-with-go/"/>
    <updated>2013-05-02T16:08:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/05/02/getting-started-with-go</id>
    <content type="html"><![CDATA[<p>In late 2007 Google started an open source initiative to develop a new programming language named Go. The goal of the language was to make it as efficient as statically compiled languages, but as easy to use as dynamic languages.</p>

<p>Furthermore, the language aims to solve the challenges of concurrent programming in an intuitive way. This makes a lot of sense as computers are getting more and more CPUs with more and more cores. A lot of current programming initiatives are actually focused on enabling us to easier write concurrent programs.</p>

<p>Node as an example does have some tools for concurrent programs, but its main focus by using the event loop is actually an approach of strictly single threaded programming, instead focusing on reducing the blocking IO. There has been a lot of discussions going around with people claiming this approach to be either ingenious or insane. My personal experience is that it is possible to write very efficient servers in Node working with the single threaded model.</p>

<p>In contrast to Node, Microsoft released the async and await keywords in C# that makes implementing asynchronous code in C# a lot easier &ndash; simply by taking away most of the work of writing such code, but it does not change how the programming model works.</p>

<p>As a language Go is mostly related to the C family of languages in my opinion. Both with regards to features and syntax it more or less feels like a cleaned up version of JAVA or C# with some cruft removed and some parts made explicit that is implicit in those language. Not surprisingly Go seems to go in the opposite direction of Node (like most languages do) and has a concurrent model at the forefront of the language focus. The intriguing thing is that Go manages to this in a fairly elegant way.</p>

<p>What Go promises is speed close to that of C and C++, a slim and elegant language that is as easy to use as Node (it is as easy to get a simple http server running), and powerful features for doing concurrent programming.</p>

<h2>Initial thoughts</h2>

<p>With my usual curiosity I have followed the development of the language from the sideline for a while, but when I saw a very impressive demonstration of building a chat server in Go at the Oredev conference last year I decided I had to take a closer look and do some development on my own. This is my initial experiments with it and thoughts about the language.</p>

<p>Like I mentioned above the language feels like a slim and more elegant version of the languages in the C family. This meant it was fairly easy for me to get started and following the great online tutorial (<a href="http://tour.golang.org/#1">http://tour.golang.org/#1</a>) I was quickly able to produce code.</p>

<h3>Clean Code</h3>

<p>I cannot recall how many hours I have wasted looking at code where half of the lines are pure cruft. Functions that are never called, variables that are never used, and so forth. Therefore, I am really excited about the way the Go compiler handles this.</p>

<p>To illustrate this we can do a very small example. I will not go over the details (read that tutorial!), but the key is that 2 integers &lsquo;a&rsquo; and &lsquo;b&rsquo; are declared and assigned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example will simply not compile! The integer &lsquo;b&rsquo; is never used for anything and thus should be removed. The following will compile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have seen some people argue that this is actually annoying when you are experimenting with the code as stuff might not get used in the beginning while developing and it then has to be commented out. I believe the pros clearly outweighs the cons:</p>

<ul>
<li>The production code is cleaner.</li>
<li>It seems to me that if you are adding code that is not used yet and compiling you might be in a YAGNI situation? Do not write the code until you need it.</li>
<li>The workaround is dead simple &ndash; just comment it out. Then if it turns out you are not going to need it someone will eventually delete that comment.</li>
</ul>


<h3>Interfaces</h3>

<p>Go does not have classes. It has structs and functions can be added to them. As such there is no inheritance, which means as a language Go favors composition over inheritance since the later is not even possible. I really like this design as composition is to be preferred over inheritance in most scenarios in my opinion (99%?) even in a language that support inheritance. This also means that the way interfaces are implemented are different from for instance C#.</p>

<p>Interfaces are implemented implicitly, which in my mind almost feels like duke typing (except checked at compile time). Thus, if an object satisfies an interface (has the required functions) it will compile. This means that interfaces can easily be added for existing code even the main library.</p>

<p>Imagine what I could have done with ASP.Net HttpContext if it worked this way in C# (check my last blog post). Invent a new interface matching the few bits of HttpContext that was being used and simply pass HttpContext along. A lot more elegant that what can be done in C#.</p>

<h3>Http Server</h3>

<p>To be honest I have not yet worked very much with Go as an Http Server, but since it is one of the things I usually end up using extensively in a language I thought I would include an example anyways.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Password</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">FavoriteColor</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="nx">User</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;%s, %s, %s&quot;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Password</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">FavoriteColor</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/user&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">User</span><span class="p">{</span><span class="s">&quot;MyUserName&quot;</span><span class="p">,</span> <span class="s">&quot;OhSoSecret&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;localhost:4000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I do not think that is too bad. Almost simpler than doing the same in Node, but still to early for me to say how easy it will be to implement a realistic server.</p>

<h3>Concurrency</h3>

<p>One of the most important features of Go is the way you write concurrent code. It consists of 2 main components being goroutines and channels. A goroutine is a lightweight thread and a channel is a way to communicate between threads.</p>

<p>A fairly common scenario will be goroutine(s) doing some calculation (or reading data) and another goroutine that then does some further manipulation like in this example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">getdata</span><span class="p">(</span><span class="nx">resCh</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">resCh</span> <span class="o">&lt;-</span> <span class="nx">i</span>
</span><span class='line'>      <span class="nx">i</span><span class="o">++</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printer</span><span class="p">(</span><span class="nx">resCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">resCh</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">resCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">getdata</span><span class="p">(</span><span class="nx">resCh</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">printer</span><span class="p">(</span><span class="nx">resCh</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">input</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Scanln</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">input</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A dumb example I agree, as there are easier ways of printing sequential integers to the console. The point was to showcase the way functions can be started in goroutines and use channels to communicate.</p>

<p>I find this a quite elegant way of doing concurrent programming, and if you want to see a slightly less contrived example take the tutorial of Go and solve the last exercise (you can find mine at my github account: <a href="https://github.com/elgsdyret/go_playground/blob/master/fetcher_2.go">https://github.com/elgsdyret/go_playground/blob/master/fetcher_2.go</a>).</p>

<h3>Wrap Up</h3>

<p>With the limited experiments I have done so far I think Go has a lot going for it. Which is also why more and more companies are showing of stuff implemented in Go. For instance Mozilla just released a beta on Heka, a quite interesting project, which is written in Go (<a href="http://blog.mozilla.org/services/2013/04/30/introducing-heka/">http://blog.mozilla.org/services/2013/04/30/introducing-heka/</a>).</p>

<p>Next step is to play around with more areas of Go. How to write unit tests? How hard is it to write more advanced web servers?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working Effectively with ASP.NET and HttpContext]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/04/22/working-effectively-with-aspnet-and/"/>
    <updated>2013-04-22T19:15:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/04/22/working-effectively-with-aspnet-and</id>
    <content type="html"><![CDATA[<p>Often in an ASP.NET WebForms application you will get up with unmanageable depencencies on the ASP.NET web stack expressed through the HttpContext class.</p>

<p>This often appears in the form of code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoSomeCoreStuff</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userId</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;userId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">DoSomeMoreCoreStuff</span><span class="p">(</span><span class="n">userId</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code could be located anywhere in you codebase, and I have seen examples of such calls to session being done more or less inline in a string describing an SQL query. It does not necessarily have to be the Session property that is accessed though, the problem is the same if Application or other bits of the current http context is accessed this way.</p>

<p>There is a number of problems with this approach.</p>

<ul>
<li>Using a string like this is not strongly typed, which easily leads to errors. For instance the session variables might have had a different casing like &ldquo;CurrentUserId&rdquo;.</li>
<li>A static reference to HttpContext.Current causes a number of problems. Firstly, it will be hard to use the code in question outside the ASP.NET stack, and secondly it will be equally hard to write meaningful tests for the code in questions.</li>
</ul>


<h2>Options</h2>

<p>There are a number of ways to solve this problem leading to a much cleaner design enabling testing and reuse. All the options involves pushing the actual call to HttpContext.Current as far up in the call chain as possible, meaning in the code behind of the aspx page.</p>

<h3>Simple Types</h3>

<p>Given that the currentUserId in our example above is an string (or any other simple type or object that can be easily constructed) why not just use that? It can be injected through the constructor or the method in question.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoSomeCoreStuff</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">DoSomeMoreCoreStuff</span><span class="p">(</span><span class="n">userId</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Domain Specific Wrapper Class</h3>

<p>Often it is not as simple as a single entry that you want to retrieve from the session. Maybe there is a group of related entries that you want to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoSomeCoreStuff</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userId</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;currentUserId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userColor</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;favoriteColor&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userNickname</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;nick&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">DoSomeMoreCoreStuff</span><span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">userColor</span><span class="p">,</span> <span class="n">userNickname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that case an interface named according to the relation (for instance UserContext in our example) and injected can solve this problem. The key is to have an implementation of the interface that actually wraps Session and ensure that the string key for the entry is not copied all over the code. The wrapper implementation is instantiated at the top level of the web stack, most often in the code behind class and elsewhere we code against the interface in a inversion of control style.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoSomeCoreStuff</span><span class="p">(</span><span class="n">UserContext</span> <span class="n">userContext</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userId</span> <span class="p">=</span> <span class="n">userContext</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userColor</span> <span class="p">=</span> <span class="n">userContext</span><span class="p">.</span><span class="n">FavoriteColor</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userNickname</span> <span class="p">=</span> <span class="n">userContext</span><span class="p">.</span><span class="n">NickName</span><span class="p">;</span>
</span><span class='line'>  <span class="n">DoSomeMoreCoreStuff</span><span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">userColor</span><span class="p">,</span> <span class="n">userNickname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation of the interface looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HttpContextUserContext</span> <span class="p">:</span> <span class="n">UserContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">HttpContext</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">HttpContextUserContext</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">context</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;currentUserId&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">FavoriteColor</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">context</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;favoriteColor&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">NickName</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">context</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;nick&quot;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It might seem like a lot of code, but the flexibility is definitely worth the small overhead of adding this.</p>

<h3>HttpContextBase</h3>

<p>The main problem with the original implementation of the HttpContext class is that it is not based on an interface nor an abstract base class. This means that reusing code that depends on HttpContext can be hard, and testing equally hard. Microsoft realized this problen when they released the MVC framework and added a class called HttpContextBase. The funny thing is that HttpContext does not inherit from HttpContextBase as that would be a breaking change, but it has the exact same API.</p>

<p>Thus, our problem from above with the static dependency could be solved as the following stepwise refactoring:</p>

<ul>
<li>Ensure that HttpContext is injected through the constructor or the method in question and ensure that HttpContext.Current is passed in as that value.</li>
<li>Replace HttpContext in the constructor or method with HttpContextBase and replace HttpContext.Current with new HttpContextWrapper(HttpContext.Current)</li>
</ul>


<p>And our example would then look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoSomeCoreStuff</span><span class="p">(</span><span class="n">HttpContextBase</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">userId</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">context</span><span class="p">.</span><span class="n">Session</span><span class="p">[</span><span class="s">&quot;userId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">DoSomeMoreCoreStuff</span><span class="p">(</span><span class="n">userId</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might seem a bit overkill, but we are now able to use our method with a different implementation of HttpContextBase for reuse and testing purposes.</p>

<p>When doing a different implementation you should know that every base implementation in HttpContextBase just throws a NotImplementedException. Thus, you will need to override that different bits in your test and reuse implementations depending on what you really require. Alternatively, there are a couple of generic open source implementations available if you want to pull in that extra dependency.</p>

<p>In general I would recommend using one of the first approaches, but if you are working with a fairly large system that adheres to the big ball of mud &ldquo;design&rdquo; antipattern this might be difficult. Maybe it is just to difficult to discern any meaningful relation between the different data retrieved from HttpContext, and with this approach you can at least start writing some tests to get control back of the code.</p>

<p>As I mentioned earlier this is just one simple example as HttpContext have a lot of data and functionality built in.s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With the dynamic Keyword]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/03/24/playing-with-dynamic-keyword/"/>
    <updated>2013-03-24T09:28:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/03/24/playing-with-dynamic-keyword</id>
    <content type="html"><![CDATA[<p>I have not yet had a chance to play around with the dynamic features that was introduced with .NET 4, probably because I have yet to find a good scenario for using it and probably because I am mostly stuck on doing work on the .NET 3.5.</p>

<p>Fortunately, I am currently working on a new REST API build in Nancy and the dynamic features of .NET 4 seems perfect to implement HTTP PATCH.</p>

<p>Our way of thinking is that it is hard to model with traditional classes as not all properties are necessarily included. One solution could be to make them all nullable and use that, but then it would not be possible for us to distinguish between a property simply not in the body of the request and a property the consumer deliberately set to null.</p>

<p>My first test was like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DynamicValueNoneSet</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">dynamic</span> <span class="n">a</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ExpandoObject</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="n">a</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This showed me that I would get a RunTimeBinderException if a given value was not available (yes I could also have read the documentation, but how much fun is that?).</p>

<p>My next attempt included this little implementation of DynamicObject &ndash; to avoid getting the exception when using it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">NullDynamic</span> <span class="p">:</span> <span class="n">DynamicObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">expando</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="nf">NullDynamic</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">expando</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ExpandoObject</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TryGetMember</span><span class="p">(</span><span class="n">GetMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="k">out</span> <span class="kt">object</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">expando</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="k">out</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TrySetMember</span><span class="p">(</span><span class="n">SetMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">expando</span><span class="p">[</span><span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">]</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the declared goal is to be able to distinguish between a value not being there and deliberately being set to null, this would not work either.</p>

<p>Actually what I found myself thinking was that I missed the &ldquo;undefined&rdquo; value from javascript, or some other way to express that something was not there, built into the language.</p>

<p>Trying to avoid going to such drastic measure I came up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Dynosaur</span><span class="p">:</span> <span class="n">DynamicObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">expando</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">Dynosaur</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">expando</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ExpandoObject</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TryGetMember</span><span class="p">(</span><span class="n">GetMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="k">out</span> <span class="kt">object</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">expando</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="k">out</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TrySetMember</span><span class="p">(</span><span class="n">SetMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">expando</span><span class="p">[</span><span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">]</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">bool</span> <span class="nf">HasValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">expando</span><span class="p">.</span><span class="n">Keys</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maybe not the most elegant solution, but I does allow me to write code like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">PrintName</span><span class="p">(</span><span class="kt">dynamic</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(!</span><span class="n">a</span><span class="p">.</span><span class="n">HasValue</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;dog&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;the name is: &quot;</span> <span class="p">+</span> <span class="n">a</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given that &ldquo;a&rdquo; is actually an instance of my Dynosaur class. I would not say that I am entirely satisfied with this implementation, but I actually think that this is as far as the dynamic features of C# will take me.</p>

<p>Any good ideas out there? I am thinking there must be other people that has played around with this and has come up some crazy dynamic stuff in C#.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps Days London 2013]]></title>
    <link href="http://elgsdyret.github.io/blog/2013/03/16/devops-days-london-2013/"/>
    <updated>2013-03-16T21:38:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2013/03/16/devops-days-london-2013</id>
    <content type="html"><![CDATA[<p>The devops &ldquo;thingy&rdquo; is only a few years old. I use the word &ldquo;thingy&rdquo; (if it can be considered a word) as it is seemingly hard to describe precisely what exactly devops is.</p>

<p>I am new to devops, but went to devops days in London anyways. This is my attempt to clear my head of some of the thoughts, ideas, and impressions that have been rambling around my head for these two days, and probably will for quite some time.</p>

<p>I had a blast of a time in London listening to the different speakers and participating in discussions, but I must admit that I am even more confused now than I was before coming. Nevertheless, I did get some impressions:</p>

<ol>
<li>Getting back to my opening sentence, the notion that has struck me as being one of the most important is that devops might not be meant to be described precisely, but is a continuous movement towards a better way of delivering value for the end customer (ups&hellip; I just did my own attempt at a description). I have heard several other suggestions during these days and it seems that each individual has his own definition of devops. I had the pleasure of talking with Patrick Debois over a beer about this and he hinted that this was actually on purpose. Maybe the journey is more important than the goal and a large part of the value comes from defining what devops means to you? What is your definition?</li>
<li>You can get some value with tools and processes, but if you do not get the people aboard you will not get to the end goal (which seems to be as hard to define as the definition).</li>
<li>Changing culture seems to be most powerful pattern for doing devops and maybe the only really relevant one.</li>
<li>There are a zillion of tools out there that I had never heard about and I am going to try out. Seems like everybody is using (have used at some point) logstash, graphite and so forth.</li>
<li>The people that do devops are awesome and passionate about it, which makes me want to learn more and participate in more devops days (Copenhagen next year anyone?)</li>
</ol>


<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Polyglot JavaScript]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/11/18/polyglot-javascript/"/>
    <updated>2012-11-18T13:14:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/11/18/polyglot-javascript</id>
    <content type="html"><![CDATA[<p>Over time JavaScript has gained a lot of traction as it is the default option for running code in the browser, and it has become a valid server option with the rise of node. This progress has largely been fueled by an arms race between the major browser vendor continuously trying to wield the fastest environment for running JavaScript.</p>

<p>Thus, as JavaScript can be run everywhere and with the notion that this language like any other has its rough spots (partly due to the history of it&rsquo;s creation, a notion supported by the famous book by Douglas Crockford &ldquo;JavaScript the Good Parts&rdquo;) it is no wonder that alternatives that compiles to JavaScript have been popping up for a while.</p>

<p>Microsoft recently released TypeScript to join the efforts of Google with their Dart language to define the future of code running in the browser. Simultaneously, initiatives like CoffeeScript (by J Ashkenas) has gained some traction and the community is working (fighting) to get the next version of JavaScript ready. Another option that I cannot leave out is ClojureScript a version of the brilliant Clojure language that compiles to JavaScript.</p>

<p>The options are abundant each with their own goals. Some like TypeScript and Dart aim to bring some form of static typing to the table (I do not specifically want this in JavaScript, but I still welcome these initiatives), while a language such as CoffeeScript aim to improve the syntax and hide some of the bad parts of JavaScript.</p>

<p>J Ashkenas (of BackBone, Underscore and CoffeeScript fame) maintains a quite comprehensive list (<a href="https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS</a>), and for a good read on the different aspect of languages compiling to JavaScript consider: <a href="http://buildnewgames.com/compiling-to-javascript/">http://buildnewgames.com/compiling-to-javascript/</a></p>

<p>Indeed it is a very good time to be a web (Node) programmer. Some notable JavaScript engineers (Such as N. Zakas) claim that time would be better spent improving JavaScript and teaching it than building alternatives, but I believe that every new language will bring inspiration to developers and to the future of JavaScript.</p>

<p>All of the languages compiling to JavaScript has a shared number of cons:</p>

<ul>
<li>Build process: Because they actually compile to JavaScript. Any serious JavaScript project will have a build process anyways, combining files, minifying, obfuscating, possibly running test suites automatically, and thus I do not see a big problem with this.</li>
<li>Debugging: Since what you are sending to the browser is JavaScript your debugging will also be in JavaScript. This means that unless you can get source map to work <a href="http://addyosmani.com/blog/the-breakpoint-episode-3-source-maps-shortcut-secrets-and-jsrun/">http://addyosmani.com/blog/the-breakpoint-episode-3-source-maps-shortcut-secrets-and-jsrun</a>, to use one of these languages you need to be fluent in JavaScript. Definitely, a challenge for some, but for experienced JavaScript developers this might not be a big problem (on a side note I believe that CoffeeScript for instance generates quite nice JavaScript).</li>
</ul>


<h3>CoffeeScript</h3>

<p>I have spend some energy on CoffeeScript as an alternative (or in addition to!) to JavaScript on my projects. I believe CoffeeScript brings readability and as a consequence of this also maintainability to a project. I cannot stress enough how important readability is for any piece of code and as such doing CoffeeScript to improve that becomes a very intriguing option.</p>

<p>One of the features about CoffeeScript that i most often hear complaints against is meaningful indentation, and it was also something I personally was not sure I would like. Nevertheless, the more I think about it, I am for using the indentation, as this is the way I consume code more than it is the braces. Why should the compiler use a different mechanism than me for interpreting code? Is it not easier to maintain code where your understand the code the same way the compiler does?</p>

<p>Here is just a few examples of features I believe adds readability to code:</p>

<p>Function syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">a = </span><span class="nf">-&gt;</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>This especially becomes valuable if you like me use a lot of underscore.js functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">_</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">){</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">_</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]).</span><span class="nx">each</span><span class="p">(</span><span class="nf">(num) -&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">num</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">b</span> <span class="o">=</span> <span class="s1">&#39;b&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In CoffeeScript you could do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nf">(a, b = &#39;b&#39;) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, CoffeeScript is full of features that reduces the cluttering of your code removing unnecessary noise and thereby improving readability.</p>

<p>I could whip up a ton more examples, but instead if will just point you to <a href="http://coffeescript.org/">http://coffeescript.org/</a> where you can read more if your interested. No need for me to copying all the examples :-D</p>

<p>Recently, I converted a JavaScript project to CoffeeScript and I litterally ended up removing one third of all the characters just in the conversion. Afterwards, I spends some time using some of the nice features such as default values for parameters and splats, and consequently was able to reduce the amount of code even more.</p>

<p>It is indeed a good time to be a polyglot JavaScript developer and I cheer every single time a new language can compile to JavaScript &ndash; bring it on!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CORS vs ASP.NET Session]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/09/11/cors-vs-aspnet-session/"/>
    <updated>2012-09-11T20:02:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/09/11/cors-vs-aspnet-session</id>
    <content type="html"><![CDATA[<p>The last couple of days I have been trying to implement a pure javascript client that could connect to our SOAP API.</p>

<p>To do that we need to enable <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-origin resource sharing</a> (called CORS for short). Basically, as a security measure browsers implement Same origin policy ensuring that only programs loaded from the same domain can query resources on that domain.</p>

<p>Thus, JavaScript loaded from <a href="http://www.example.com/myprogram.html">http://www.example.com/myprogram.html</a> could query <a href="http://www.example.com/api,">http://www.example.com/api,</a> but no <a href="http://www.test.com/api.">http://www.test.com/api.</a></p>

<p>As Rich Internet Applications written as javascript clients is seeing an increase in popularity (and ease of implementing due to lots of nice frameworks such as Backbone), more and more providers of services will want to expose those services directly to the clients.</p>

<p>To enable CORS we need to set a series of headers and respond to the HTTP OPTIONS verb request (used by the browser to figure out if the server actually supports CORS). To be honest I have yet to figure out all the headers and exactly why each one is required, but with some trial and error I have gotten it to work.</p>

<h3>Allowing CORS from ASP.NET SOAP WebService</h3>

<p>The first challenge for our API was to get our ASP.NET SOAP service to set the correct headers (which I just admitted to not knowing&hellip;) for only that service.</p>

<p>It turned out this is actually not that hard and throwing in a HttpModule setting the headers for requests to a specific url (the service) with a lot of random (more or less) headers actually enabled me to invoke the service from javascript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">AddCors</span><span class="p">(</span><span class="n">HttpApplication</span> <span class="n">httpApplication</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">hdrs</span> <span class="p">=</span> <span class="n">httpApplication</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">origin</span> <span class="p">=</span> <span class="n">hdrs</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;Origin&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">origin</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">origin</span> <span class="p">=</span> <span class="s">&quot;*&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Origin&quot;</span><span class="p">,</span> <span class="n">origin</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Credentials&quot;</span><span class="p">,</span> <span class="s">&quot;true&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;Content-Type, Cake&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">httpApplication</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">ToUpper</span><span class="p">()</span> <span class="p">!=</span> <span class="s">&quot;OPTIONS&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Headers&quot;</span><span class="p">,</span> <span class="n">sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Methods&quot;</span><span class="p">,</span> <span class="s">&quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;,authorization,Content-Type,accept&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;,accept-charset,accept-encoding,accept-language&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;,connection,content-length,content-type&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;,host,origin,referer,user-agent, SOAPAction&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Access-Control-Allow-Headers&quot;</span><span class="p">,</span> <span class="n">sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>  <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Access-Control-Max-Age&quot;</span><span class="p">,</span> <span class="s">&quot;3000&quot;</span><span class="p">);</span> <span class="c1">//seconds</span>
</span><span class='line'>  <span class="n">hdrs</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;content-length&quot;</span><span class="p">,</span> <span class="s">&quot;0&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">httpApplication</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="m">204</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Consuming SOAP envelopes from JavaScript</h3>

<p>I tried out a number of promising leads for consuming SOAP services. The common ground for all of them was that they used the XmlHttpRequest object internally and tried to generate a proxy based on the wsdl of the service. After a couple of tries I gave up on this approach and went closer to the metal.</p>

<p>Using fiddler and an integration that worked (written as a server) I spied on the SOAP envelopes needed to send the requests, and saved them as templates (in the format for Mustache.js). This way I could easily put in the values needed without having to worry about serializing object and manipulating XML. The response was simply parsed using regex&#8217; and thus I was able to handle the envelopes.</p>

<p>Actually, this way of handling although primitive is not half bad. If the service changes the service contract the template/regex has to be updated, but code generated on top of the wsdl would suffer from the same, and the implementation is extremely simple and basic this way.</p>

<p>The last bit was sending the requests to the server which was done through jQuery and the XmlHttpRequest. This took me some fiddling (not using fiddler) and googling to find the exact parameters and such. Again I used fiddler to find the correct headers for the requests and added them using jQuery.</p>

<h3>Using ASP.NET Cookie SessionState from JavaScript</h3>

<p>Thus, I was able to log in to our web service and retrieve the key used for subsequent request as an access token (actually the ASP.NET session id).</p>

<p>Unfortunately, the web service uses ASP.NET session to maintain whether you are logged in or not. Thus, a Set-Cookie header is returned from the Connect method and that Cookie must be returned in the header of the following requests to ensure access.</p>

<p>Due to security measures it is not possible to add the Cookie header manually to the XmlHttpRequest object. As the session id is also returned in the SOAP response envelope it is not a problem to retrieve it and I managed it to send it in another header called CAKE (part of the explanation for the many weird headers in the CORS implementation above).</p>

<p>Thus, I was stuck with changing the service implementation (not relying on ASP.NET session or somehow hijacking it using my CAKE header) or forcing the potential consumers of our API to use one of the potential hacks using iframes or JSONP (which I have not tested), but at least the last option defeats the purpose of making it easy to access (one could ago that SOAP does the same, but that is another battle).</p>

<p>What is the point you might ask? I actually managed to implement CORS, but due to the implementation using ASP.NET Session it is completely useless.</p>

<p>Anyone has any hacks worth trying?</p>

<p>Next step&hellip;. Something more usable than SOAP&hellip;&hellip;. Not using ASP.NET Session</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintainable ASP.NET Webforms - Part II]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-ii/"/>
    <updated>2012-09-08T13:36:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-ii</id>
    <content type="html"><![CDATA[<p>In the last post I described how I believe that implementing the MVP pattern is a feasible way of improving ASP.NET Web Forms code:
<a href="http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-i">part 1</a></p>

<p>The most important lesson is still that you should not use ASP.NET Web Forms unless you absolutely have to.</p>

<h3>The Example</h3>

<p>I have added a tiny example to github: <a href="https://github.com/elgsdyret/mvp-example">example</a></p>

<p>Like any contrived example it might be too simple and too silly to really show the power of implementing the pages this way, but here is a short walk-through of the flow anyways:</p>

<p>The view loads the presenter with a reference to itself and asks it to PresentAllDogs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Page_Load</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">presenter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DogSearchPresenter</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="n">presenter</span><span class="p">.</span><span class="n">PresentAllDogs</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The presenter then retrieves all the dogs (probably from some kind of data layer) and asks the view to render the dogs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">PresentAllDogs</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">view</span><span class="p">.</span><span class="n">RenderDogs</span><span class="p">(</span><span class="n">Dog</span><span class="p">.</span><span class="n">All</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view just assigns a local field with the values retrived (in some scenarios it might be doing a databind or similar, all depending on how the template aspx is used):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">RenderDogs</span><span class="p">(</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">Dog</span><span class="p">&gt;</span> <span class="n">dogs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Dogs</span> <span class="p">=</span> <span class="n">dogs</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the template is rendered it automatically renders the Dogs from the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="p">&lt;</span><span class="n">table</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="n">tr</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span><span class="n">th</span><span class="p">&gt;</span><span class="n">Name</span><span class="p">&lt;/</span><span class="n">th</span><span class="p">&gt;&lt;</span><span class="n">th</span><span class="p">&gt;</span><span class="n">Race</span><span class="p">&lt;/</span><span class="n">th</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;/</span><span class="n">tr</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;%</span><span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">dog</span> <span class="k">in</span> <span class="n">Dogs</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'>  <span class="p">&lt;</span><span class="n">tr</span><span class="p">&gt;</span>
</span><span class='line'>      <span class="p">&lt;</span><span class="n">td</span><span class="p">&gt;&lt;%=</span><span class="n">dog</span><span class="p">.</span><span class="n">Name</span><span class="p">%&gt;&lt;/</span><span class="n">td</span><span class="p">&gt;</span>   <span class="p">&lt;</span><span class="n">td</span><span class="p">&gt;&lt;%=</span><span class="n">dog</span><span class="p">.</span><span class="n">Race</span><span class="p">%&gt;&lt;/</span><span class="n">td</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;/</span><span class="n">tr</span><span class="p">&gt;</span>
</span><span class='line'>  <span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">table</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way of rendering is my preferred as it puts just the right amount of rendering logic in the template. It does not work well if you need to manipulate specific rows of the table and have the viewstate handle which you clicked.</p>

<p>For this you could use the listview control which is a decent compromise between using raw template rendering and having the view set values on elements using the runat server tag (I definetely prefer the first template rendering.)</p>

<p>Happy coding!</p>

<h2>Comments</h2>

<p>Alexander Beletsky</p>

<p>Good stuff.</p>

<p>There is ASP.NET MVP framework.</p>

<p><a href="http://aspnetmvp.codeplex.com/">http://aspnetmvp.codeplex.com/</a></p>

<p>But I also still prefer lightweight custom solutions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintainable ASP.NET Webforms - Part I]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-i/"/>
    <updated>2012-09-08T11:04:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-i</id>
    <content type="html"><![CDATA[<p>In the next couple of blog posts I will try to outline how I try to improve the maintainability and testability of pages written in the ASP.NET Web Forms framework</p>

<h3>Don&rsquo;t use ASP.NET Web Forms</h3>

<p>If you are not forced there is no good reason to use this technology. There are many better ways to write your web applications. If you wish to work with the .NET framework you might consider:</p>

<ul>
<li>ASP.NET MVC latest incarnation (if it just has to be Microsoft)</li>
<li>Nancy (nice open source framework)</li>
<li>&hellip; and other options</li>
</ul>


<p>If your wish to use something other than .NET there are also many options (the reason I base this decision on whether you want .NET or not is simply because we started out discussing alternatives to Web Forms):</p>

<ul>
<li>RAILS, Sinatra, Goliath and other options on Ruby.</li>
<li>Django on Python.</li>
<li>Node.js potentially with the express framework.</li>
<li>&hellip; and lots of other options.</li>
</ul>


<p>Point is: <em>First way to improve your Web (Forms) code is to not use Web Forms.</em></p>

<h3>I Have no Choice</h3>

<p>If you are stuck building Web Forms, it is most likely due to working on a legacy system build with this technology. There are lots of those out there and they are not getting upgraded to better options (at least not all of them).</p>

<p>Thus, we have to manage somehow.</p>

<p>The main tactic I advocate for coping with the platform is a pattern called MVP (Model-View-Presenter): <a href="http://martinfowler.com/eaaDev/uiArchs.html">MVP</a>(Go down a bit to find the description)</p>

<p>Now this may not be the most easily accessible description and potentially you might not be able to implement the pattern in your application from this description (or it would require quite some work).</p>

<p>There is a catch to the pattern though. If used correctly it can help make your code more testable and easier to reason about, but it adds complexity and will not save you from having to know about viewstate, page lifecycle and other details about Web Forms.</p>

<h3>Bits and Pieces</h3>

<p>Not surprisingly we need a class for each of the roles of Model, View, and Presenter (actually a bit more).</p>

<h4>Model</h4>

<p>The model is just a PONO (plain old .NET object) and can be your domain model or alternatively a view model. When to use a view model is largely a matter of taste, but I prefer not to do it unless I actually use it for something as it does add an overhead of an extra class and mapping code (consider using a tool like automapper if you do have both models).</p>

<h4>View</h4>

<p>The view in our ASP.NET webform MVP implementation is basically our code behind file and the aspx file can be considered a template for helping with rendering the html. The key is to keep the code behind file very very slim as the view can typically be very hard to test due to dependencies on ASP.NET.</p>

<p>The responsibility of the view is to render html, retrieve values from the html (really being the viewstate), and kicking of the flow (that is the way webforms work).</p>

<p>The view is hidden by an interface to save the Presenter from knowing the gritty details of webforms. This way the presenter could also be used in another application that is not necessarily for the web.</p>

<p>The view initializes the presenter with a reference to the view itself &ndash; typically in the pageload event, but that really depends on the purpose of the page.</p>

<h4>Presenter</h4>

<p>The presenter is somewhat similar to the Controller in the MVC pattern, at least in the way I use it. It is not triggered in the same way as in MVC, though, as the view has to start it up.</p>

<p>Basically, the presenter handles the flow of the page, receiving data from the view when an event occurs (a button is clicked for instance), using lower level constructs (like data-layers or services) to manipulate data and then typically asking the view to render something. I would never have a presenter function return a value, as it is solely up to the presenter to determine what the view should do (not how though).</p>

<p>The presenter will get a reference to the view through the interface in the constructor.</p>

<p>In .NET this leaves us with 5 pieces:</p>

<ul>
<li>A View (for instance SearchDogView) which inherits from System.Web.UI.Page.</li>
<li>A template used for rendering html for the view (the ASPX file).</li>
<li>An interface for the view (ISearchDogView).</li>
<li>A presenter (SearchDogPresenter)</li>
<li>A model (or 2 if we decide to use a ViewModel)</li>
</ul>


<p><a href="http://elgsdyret.github.io/blog/2012/09/08/maintainable-aspnet-webforms-part-ii">Part II: A tiny example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js When The Honeymoon is Over]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/06/01/nodejs-when-honeymoon-is-over/"/>
    <updated>2012-06-01T05:33:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/06/01/nodejs-when-honeymoon-is-over</id>
    <content type="html"><![CDATA[<p>Since the beginning of the year I have been working on building a new REST based API to be consumed by both internal and external clients in <a href="http://nodejs.org/">Node.js</a>.</p>

<p>The main reason for choosing node and mongo as the main elements in our stack when we started the project was to alleviate a number of pains we experienced with the &ldquo;old&rdquo; stack of ASP.NET and SQL. Most of this was related to the amount of ceremony that goes in to doing even simple stuff on that stack, which was being made worse by the way the technologies were used. Most if not all of these pains were indeed alleviated, but we gained a couple of new ones, which can be mitigated to some extend.</p>

<h3>Debugging and Stack Trace</h3>

<p>Having spent many hours the last couple of weeks debugging errors in an application with a codebase that is gaining in size I have come to the conclusion that simply put, the debugging and stack trace in node is inferior to what you would get in a .NET based environment.</p>

<p>I have found some of the error messages to be short non descriptive and very generic, making it often fairly hard to understand what is going on. Likely, it is a consequence of the lack of maturity of the technology combined with the lesser experience I have with it, but reading a stack trace in .NET would often mean I know exactly what the problem was, which is not the case with node.</p>

<p>Probably, the callback nature of most of the API&rsquo;s also is somewhat to blame for this.</p>

<p>Most of these challenges can be minimized with a good and solid test suite, as it can help pinpoint more precisely where an error has occurred.</p>

<p>A nice little addition to this is that the dynamic nature of the language means simple spelling mistakes in parts of the program that is not executed by tests (bad!) will not get caught. This is an easy problem to fix though &ndash; apply <a href="http://www.jshint.com/">JSHint</a>, <a href="http://www.jslint.com/">JSLint</a>, or similar (do it from day one, you owe it to yourself).</p>

<p>I tried to find a good &ldquo;bad&rdquo; error message to put here, but could not easily provoke one intentionally. Will keep a look out for it and make a new post next time I find a good one.</p>

<h3>Integration vs Unit Tests &ndash; Design and Architecture</h3>

<p>The way our application is designed means it is mostly implemented using <a href="http://expressjs.com/">express</a> middleware stack with a little bit of business logic sprinkled here and there. We quickly discovered that this was probably not the best architecture, but still have some leftovers and we have had some challenges to write code that can be unit tested in a meaningful way (without a ton of mocks and fake objects being build).</p>

<p>This is mainly a design challenge and not a consequence of node, nor javascript, but it has lead to a side effect. Because the &ldquo;units&rdquo; are not easily testable, a large percentage of the codebase is mainly tested with integration style tests using &ldquo;<a href="https://github.com/danwrong/restler">restler</a>&rdquo; (I would actually recommend using &ldquo;<a href="https://github.com/mikeal/request">request</a>&rdquo; instead). These tests are as good or even better than unit tests to find errors, but (un)fortunately the error data returned from our API does not give me enough information to pinpoint what goes wrong.</p>

<p>Thus, the conclusion I have come to is that the middleware should be extremely thin and always defer the bulk of the implementation to another module that can tested. This goes both for middleware implementing cross-cutting concerns and the actual end-point implementation.</p>

<p>The platform does not have a large body of known design patterns for implementing maintainable applications. This easily leads to developers trying out a lot of different approaches with different merits and flaws, which means the codebase could suffer from inconsistencies making it hard to maintain.</p>

<h3>Hosting</h3>

<p>Figure out very early how you are going to host this. If you are going for a cloud based hosting vendor and you are based in the States, there is a number of options.</p>

<p>The same options are available in Europe, but from the States, leading to a latency challenge. Trying to get a solid agreement with a hosting partner in Europe has been hard and we have been forced to settle for a worse agreement that we would like.</p>

<p>The good part is that due to the traction of the platform almost everyday a new option pops up, and we can always fallback to running off amazon or azure and managing the setup ourselves.</p>

<h3>Picking the right Stack</h3>

<p>Node.js has been gaining a lot of traction and combined with some of the prime modules it is in general a very nice stack for building the kind of API we are building. I would pick it again if I had to make the choice again today, but this time with the knowledge of what is brings.</p>

<p>It has taken longer, and been harder than expected (was almost expected), but we are getting close to being done and can reflect upon what worked and what did not work.</p>

<ul>
<li>Get JSHint or JSLint up and running (as early as possible).</li>
<li>Get CI up and running (as early as possible) &ndash; not after 4 months when you are trying to finish up the project.</li>
<li>The design and architecture is really important &ndash; do not let the speed with which you can whip up new features keep you from worrying about this. Design for tests that can tell you what is wrong with the application when changes are being made.</li>
<li>Decide as early as possible on standards (to enforce the design and architecture decisions), and make sure the application follows these before moving on. I would recommend starting out with the revealing module pattern, hoisted functions for callback nesting, avoiding control flow libraries such as <a href="https://github.com/caolan/async">async</a>, avoiding inheritance, considering every used external module very carefully, and most importantly keeping it dead simple.</li>
<li>Start out with testing hosting setups from day one:

<ul>
<li>Deploy your app to different platform as service vendors, such as:

<ul>
<li><a href="http://www.heroku.com/">Heroku</a></li>
<li><a href="http://nodejitsu.com/">Nodejitsu</a></li>
</ul>
</li>
<li>Deploy your app to amazon or similar &ndash; if nothing else to get an idea of how the server actually work and what is required.</li>
<li>Use these experiments to figure out how you want to run your application in production. Figure out which are &ldquo; real&rdquo; requirements and which are nice to have.</li>
</ul>
</li>
<li>Consider before you start whether to use <a href="http://coffeescript.org/">CoffeeScript</a> or javascript to write the application. It might seem like a straight forward choice to you, but at least do yourself the favor of spending just a little bit of time researching.</li>
</ul>


<p>Happy coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js First Experiences]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/04/09/nodejs-first-experiences/"/>
    <updated>2012-04-09T10:51:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/04/09/nodejs-first-experiences</id>
    <content type="html"><![CDATA[<p>The last 3 months or so I have been busy working on a new backend built in node with mongo as the database. It has been lots of fun, with some frustration, and lots of heureka moments.</p>

<p>This is my attempt at describing those experiences, some good and some bad.</p>

<p>The two many reasons we opted to work with node was the following:</p>

<ul>
<li>Development speed, due to the simplicity of node and using the same language in both client and server.</li>
<li>Performance, most of the information we found indicated that we could easier get more performance from using node than the alternative of ASP.NET.</li>
</ul>


<h3>Development Speed</h3>

<p>It seems like the development speed has indeed been increased, but in reality we cannot really measure before we build the next module on top of node. Our first module has also been the proving grounds for the technology stack, as the maturity of the technology means there is not so much information to find on how to write the best node code. Thus, the progress has most likely been slower than what we can expect in the future (yet I still believe I have seen an improvement compared to old projects).</p>

<h3>Same Language</h3>

<p>So node being javascript, it is in fact the same language is we use in our browser client (built on top of backbone). But, due to the fact that node does not work in the same way as the browser with regards to the code it is not completely trivial to share code between server and client.</p>

<p>A given file containing a function in node would have to use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">myFunction</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To expose it to being available for use elsewhere. In addition this file would have to be required for the code to actually be used elsewhere. One could argue this is much better than the browser where the same function would probably be attached to some global object (pretending to be a namespace).</p>

<p>To give an example of how one could implement code usable for both browser and node, I have taken the liberty of showing a snippet from the brilliant underscore library doing exactly this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">module</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">exports</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">_</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">exports</span><span class="p">.</span><span class="nx">_</span> <span class="o">=</span> <span class="nx">_</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="nx">root</span><span class="p">[</span><span class="s1">&#39;_&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cross OS Platform</h3>

<p>Having a cross OS platform gives us more freedom in which development machines to use and servers to run in production, which also gives us more freedom regarding hosting partners, whether in the cloud or not. Actually, all the developers are working on windows, as we have found the Webstorm IDE to be the best tool by far, and it does not work well on linux (when that linux is a virtual box at least.</p>

<p>Running development on windows and production on linux has not been without problems though. The node core is equally good on both OS, but some of the modules we have used have not been properly tested on windows. Additionally, the windows file system is case insensitive, while it is case sensitive on linux, which has led to one error deployment so far.</p>

<h3>Pyramid of Doom</h3>

<p>Much have been written about the problems the callback nature of most node api&rsquo;s lead to. Our solution has been to mainly use function hoisting:</p>

<p>Nested:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">getSomeData</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">doSomeStuff</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hoisted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">getSomeData</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">dataRetrieved</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">dataRetrieved</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomeStuff</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">someStuffDone</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">someStuffDone</span><span class="p">()</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is working ok for scenarios where we have a fixed depth of nesting of functions (the example with 2 above is not a bad pyramid of doom by the way &ndash; try throwing in a couple of more levels of nesting and you will see the problem). Unfortunately, this method does not work with a dynamic level of nesting (think an array of functions generated and to be called in sequence), and this is where a library such as Async can help.</p>

<p>Solving the pyramid of doom this way has not been without challenges, as there have been arguments about using Async or similar library even with a fixed amount of nesting. My standing on this is that code written with Async in that scenario (fixed level of nesting) is much harder to read, understand, and reason about.</p>

<h3>Express and middleware</h3>

<p>Like most developers doing services in node exposed on the web, we have chosen the express web framework. There are a lot of features built into express, and to be honest we only use a fraction of them. Mainly the middleware stack (from the connect sub module) has been used for good, but certainly also for bad.</p>

<p>Cross cutting concerns like logging, authorization, and gzipping are all examples where benefit can be reaped from the stack and it is easy to apply a certain behaviour to all requests and responses. Unfortunately, the ease of implementation has lead to data access and business logic being implemented as middleware. This went well for a while, but it is harder to reuse and test the middleware as they are dependent on the (request, reponse, next) &ndash; triple of arguments, as opposed to business relevant objects.</p>

<p>Thus, we are moving towards not using middleware for data access and business logic, having one function, registered as middleware, for each end-point which then delegates to business and data oriented modules.</p>

<h3>Require (Cyclic)</h3>

<p>As we move along and introduce more files and more modules, I have noticed a tendency to let all dependencies be resolved with require. This leads to some scenarios where we have fairly low level functionality (such as configuration api) require high level functionality (the user module). This easily leads to cyclic require loops, causing bugs that can be hard to resolve. Like any software it is good practise also in node to let high level functionality depend on low level functionality &ndash; not the other way.</p>

<p>The solution to reusing bits is, as with many frameworks, to divide and conquer. If a high level module contains a function that would be really usable in a low level module, extract it in a seperate module and break the cycle that way.</p>

<h3>Return Callback</h3>

<p>Just an observation on the nature of some of the node code I have been writing recently:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doSomeStuff</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s1">&#39;bad stuff happened&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;wuhuuuu bad stuff did not happen&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Did you find the bug? This is the most simple example I could come up with, but when it gets a bit more complex I find myself forgetting the return statement in front of the first callback, leading to some funky debugging session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">doSomeStuff</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s1">&#39;bad stuff happened&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;wuhuuuu bad stuff did not happen&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maybe it is just a quirk of how many brain process the code, but consider yourself warned! ;-D</p>

<h3>Simplicity</h3>

<p>This is the one point where I believe node really shows its strength, it is dead simple to implement a server. Recently, we had a potential candidate who had written the server part of his test in less than 100 lines of coffee-script, and I really think this says it all.</p>

<h3>Performance</h3>

<p>I have written a lot about my experiences with developing on node, and very little regarding the awesome earth-shattering speed of node.</p>

<p>Some claim that the way node works (event-loop and such) is the coolest thing since the invention of the wheel, while others claim that it is borderline stupid. I am not going to join that discussion, but just tell that what I have seen so far and the experiments done show that node is indeed fast, and also faster than what we did before. That being said our team does not have good large scale measurements or experiments of our own to prove this.</p>

<p>Is node the best choice available for us? Maybe, it could be, but at least until now it has proven to be a very good choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mapping Screen Mockup to Backbone.View(s)]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/01/29/mapping-screen-mockup-to-backboneviews/"/>
    <updated>2012-01-29T10:38:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/01/29/mapping-screen-mockup-to-backboneviews</id>
    <content type="html"><![CDATA[<p>One thing I have noticed after working on a Backbone powered application for 4 months is that developers have very different views on how to split a screen mockup into Backbone views in the code.</p>

<p>I have seen re-use of code with each and every input field being wrapped by a view and named as a control (&hellip;smells like ASP.NET web forms controls &ndash; shudders&hellip;.) and potentially you could also have all the markup handled by one view.</p>

<p>Given a small example screen mockup for gathering simple information about a person, like this:</p>

<p><img src="http://elgsdyret.github.io/images/Simple_Mockup.png"></p>

<p>Lets try to look at the different ways we could implement this with Backbone views, but first let us look at the requirements:</p>

<p><em>There is a message area that greets the person when the full name has been given (should be triggered when the user leaves either field if both are filled), and similarly the message area will contain errors if something goes wrong when clicking the save button.</em></p>

<p><em>FirstName and SurName only allows characters (yes I am aware this excludes some people with dots in names or similarly). This should be checked when leaving the field.</em></p>

<p><em>Country is actually a dropdown that lists the Scandinavian countries.</em></p>

<p>With these requirements in hand we have a couple of options for implementation.</p>

<h4>Not using Backbone at all.</h4>

<p>Will save us the trouble of having to worry about Backbone, but since we are building this form within a Backbone powered application and it does contain several things that could benefit from Backbone this is probably not the best idea.</p>

<h4>Using one template with all markup for this screen and one Backbone view.</h4>

<p>This is probably a very good first implementation, with the clear benefits of having a template that is easy to read and style, but unfortunately we will also have a view that does not adhere to the Single Responsibility Principle (SRP).</p>

<h4>Using a view with a template for every single item on the screen</h4>

<p>This option removes all readability of the markup as it is broken into a multitude of very small fragments, and you will probably end up with a view for the entire screen with a render method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">firstNameInput</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">control</span><span class="p">.</span><span class="nx">InputView</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">,</span> <span class="nx">attribute</span><span class="o">:</span> <span class="s1">&#39;heading&#39;</span><span class="p">,</span> <span class="nx">caption</span><span class="o">:</span> <span class="s1">&#39;FirstName&#39;</span><span class="p">,</span> <span class="nx">maxlength</span><span class="o">:</span> <span class="mi">250</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">childViews</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">firstNameInput</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">firstNameInput</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.firstNameContainer&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">firstNameInput</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oooh&hellip; That was only for one field.</p>

<h4>Solution</h4>

<p>Somewhere in between all the crazy options given above the solution can be found. Maybe what we really want is a view corresponding to the screen, a view for the message area, a view for the area with the input fields, and potentially a view for the save button. It will adhere to SRP in my opinion and the markup with be in fragment sizes that are possible to mentally combine and get the overview.</p>

<p>It leaves us with the problem of the input area &ndash; what about the validation, binding to the model etc?</p>

<p>In third option this was most likely handled by the InputView.</p>

<p>I would suggest keeping the markup in the template, possibly enriching it with just enough information to enable binding dynamically to the model (consider using or stealing the idea of  something like <a href="https://github.com/derickbailey/backbone.modelbinding">backbone.modelbinding</a>). Apply the binding jQuery style at the last line in the render method (only one line) and use jQuery to find all elements requiring binding.</p>

<p>Thus:</p>

<ul>
<li>Be careful with fragmenting the backup for a screen too much. It really reduces the overview.</li>
<li>Don&rsquo;t use a view if you do not need one. A simple javascript module or function would do.</li>
<li>Leave the markup intact and decorate it for dynamically enriching it with behavior. In the ideal scenario your markup would work if javascript was disabled (albeit this does not make much sense in a Backbone application).</li>
</ul>


<p>Your render method should be a matter of rendering a template and calling at most one method for each dynamic behavior required: modelbinding, autocomplete in some fields, or similar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux with nodejs and mongo on Windows Host - Part 2]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/01/22/linux-with-nodejs-and-mongo-on-windows_22/"/>
    <updated>2012-01-22T11:53:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/01/22/linux-with-nodejs-and-mongo-on-windows_22</id>
    <content type="html"><![CDATA[<p>I promised to get back when I had mongo-db up and running.</p>

<p>In my blog post yesterday I pointed to his url : (<a href="http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages">http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages</a>)</p>

<p>And I did in fact install mongo using the instructions there, but I actually found the description to be confusing with the same step repeated.</p>

<p>Thus, here is what I did.</p>

<p>Opened /etc/apt/sources.list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure>


<p>Added the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen</span></code></pre></td></tr></table></div></figure>


<p>Added the key from command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10</span></code></pre></td></tr></table></div></figure>


<p>Updated from the repository and installed latest stable version of mongo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update 
</span><span class='line'>sudo apt-get install mongodb-10gen</span></code></pre></td></tr></table></div></figure>


<p>Seems to be working quite well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux with nodejs and mongo on Windows Host]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/01/21/linux-with-nodejs-and-mongo-on-windows/"/>
    <updated>2012-01-21T12:28:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/01/21/linux-with-nodejs-and-mongo-on-windows</id>
    <content type="html"><![CDATA[<p>So finally the time has come where we have decided to give the node and mongo combination a closer look at my work. Not that we are going to migrate everything to such a platform tomorrow, but the combination of node and mongo is so promising that we decided to give it a try to see how far we can get.</p>

<h3>Basic Setup</h3>

<p>This is the setup we are going for sofar (will probably change as we get smarter &ndash; please feel free to help with that):</p>

<ul>
<li>Virtual Box on windows (we used to be a .NET based Software only &ndash; so everyone has Windows machines) &ndash; (<a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a>)</li>
<li>Linux 64 bit on the virtual box:

<ul>
<li><a href="http://www.wikihow.com/Install-Ubuntu-on-VirtualBox">Ubuntu 64 bit</a> (my work setup)</li>
<li><a href="http://www.itworld.com/software/230123/install-linux-mint-12-virtualbox">Mint 64 bit</a> (my home setup): not as detailed as the Ubuntu version &ndash; so if you get stuck refer to that one</li>
</ul>
</li>
<li>Sharing of the code folder between Windows host and Linux virtual machine:

<ul>
<li>Setup local account on windows machine.</li>
<li>Share code folder on windows machine &ndash; ensure that the local account you just created has both read and write.</li>
<li>Go to /home/&lt;linux_username> and mkdir sourcecode (or whichever name you prefer)</li>
<li>Go to Linux and edit /etc/fstab (for instance sudo gedit /etc/fstab should do the trick)</li>
<li>Add the following at the bottom of the file (there are not supposed to be any line breaks in the command, white spaces are important, and commas likewise)</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> //&lt;ip_host&gt;/&lt;share&gt; /home/&lt;linux_username&gt;/sourcecode cifs 
</span><span class='line'>rw,user,uid=&lt;your_linux_loginname&gt;,gid=&lt;linux_username&gt;,username=&lt;win_username&gt;,password=&lt;win_password&gt;,_netdev 0 0</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Neither Ubuntu nor Mint has a very new version of nodejs in their package repositories, thus I did as suggested in this (<a href="http://stackoverflow.com/questions/8074327/need-advice-latest-version-of-node-js-vs-using-synaptic-package-manager">http://stackoverflow.com/questions/8074327/need-advice-latest-version-of-node-js-vs-using-synaptic-package-manager</a>)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C7917B12
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Getting mongo installed &ndash; this looks promising (have not tried yet): (<a href="http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages">http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages</a>)</li>
<li>What editor to use?: Have not decided completely yet, but currently I am considering:

<ul>
<li><a href="http://www.sublimetext.com/2">sublime text</a>. I am testing right now, and so far it has really blown my mind &ndash; install the intellisence package to get the full power.</li>
<li><a href="http://www.jetbrains.com/webstorm/">Webstorm</a>. I have been using for JavaScript for a while and I simply love it, so it says something about the promise of sulime 2 that I am testing it right now.</li>
</ul>
</li>
</ul>


<p>That is it for now&hellip; Will write more when we have the last details of our environment up and running, such as mongo install and how to structure our nodejs application in folders etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending Backbone]]></title>
    <link href="http://elgsdyret.github.io/blog/2012/01/18/extending-backbone/"/>
    <updated>2012-01-18T20:29:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2012/01/18/extending-backbone</id>
    <content type="html"><![CDATA[<p>For the past half year or so I have been using Backbone. Besides the obvious questions of how to fit the different pieces together, when to use what, and in general understanding the library, I have experimented with different ways of extended the existing Backbone behavior.</p>

<p>Having tried a lot of different methods I ended up using 2 different approaches for 2 different scenarios.</p>

<h3>Mixin</h3>

<p>You can use the different Backbone modules&#8217; extend function (they all have the same, which is not to be confused with the underscore extend function) to achieve code reuse. For instance if you wanted to create a model with an additional function you could do like this, by extending Backbone.Model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">someModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">someFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the normal way to use extend on a model, and Backbone will ensure the prototype chain is set up correctly. This is often used to create hierarchy of base models some potentially with many functions leading to a huge object that is used to extend all models from, like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">motherOfAllModels</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">someFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">},</span>
</span><span class='line'>   <span class="nx">someFunction2</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">},</span>
</span><span class='line'>   <span class="nx">someFunction3</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">},</span>
</span><span class='line'>   <span class="nx">someFunction4</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">},</span>
</span><span class='line'>   <span class="nx">someFunction5</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">},</span>
</span><span class='line'>   <span class="nx">someFunction6</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myModel</span> <span class="o">=</span> <span class="nx">motherOfAllModels</span><span class="p">.</span><span class="nx">extend</span><span class="p">({});</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, at least in my opinion this is not necessarily a good way of using such a powerful feature. A given model can be extended with a number of features from different objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">niceObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">someFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">niceObject2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">someFunction2</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">niceObject</span><span class="p">).</span><span class="nx">extend</span><span class="p">(</span><span class="nx">niceObject2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way it lets you build features in small objects that are easy to test seperately. Basically, creating a model becomes a matter of picking the different features you would like have enabled instead of dragging around a huge &ldquo;base&rdquo; model or hierarchy of base model.</p>

<p>There is a couple of problems with this use of the extend method. If the object contains methods with same names the last one to be mixed in (extended with) will overwrite the earlier ones and the prototype chain will be kinda of weird.</p>

<h3>Wrapping</h3>

<p>I have experimented with a number of ways of decorating the behavior of a Backbone modules, and basically found two feasible paths.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">bark</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;vuf&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bulldog</span> <span class="o">=</span> <span class="nx">dog</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">bark</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;vaf &#39;</span> <span class="o">+</span> <span class="nx">dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">frenchBulldog</span> <span class="o">=</span> <span class="nx">bulldog</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">bark</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>         <span class="k">return</span> <span class="s1">&#39;vif &#39;</span> <span class="o">+</span> <span class="nx">bulldog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">muffin</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">frenchBulldog</span><span class="p">();</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">muffin</span><span class="p">.</span><span class="nx">bark</span><span class="p">()).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;vif vaf vuf&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way is probably used widely by Backbone developers, but it has a few challenges.</p>

<ul>
<li>It requires a named var like bulldog to access the prototype.</li>
<li>It is pretty much a prototype chain.</li>
<li>I can&rsquo;t make Muffin a french bulldog without also making her a bulldog&hellip; (as if that would make sense).</li>
<li>Overview of what is happening &ndash; usually I will not be able to see that a french bulldog is actually a dog without going elsewhere to look in my code.</li>
</ul>


<p>Thus, I invented (probably not as the first person though!) a different way of wrapping a Backbone.Model with the behavior of my wishes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">asDog</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">oldBark</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">bark</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">noise</span> <span class="o">+</span> <span class="s1">&#39; vif &#39;</span> <span class="o">+</span> <span class="nx">oldBark</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">asBulldog</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">oldBark</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">bark</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">noise</span> <span class="o">+</span> <span class="s1">&#39; vaf &#39;</span> <span class="o">+</span> <span class="nx">oldBark</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">frenchBulldog</span> <span class="o">=</span> <span class="nx">asBulldog</span><span class="p">(</span><span class="nx">asDog</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">noise</span><span class="o">:</span> <span class="s1">&#39;vuf&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">bark</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">noise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">muffin</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">frenchBulldog</span><span class="p">();</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">muffin</span><span class="p">.</span><span class="nx">bark</span><span class="p">()).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;vuf vaf vuf vif vuf&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is like about this way is:</p>

<ul>
<li>I can &ldquo;chain&rdquo; the wrapping.</li>
<li>I can make a french bulldog a bulldog without making it a dog.</li>
<li>When I find the definition of a french bulldog I can see all the ways of it.</li>
</ul>


<p>I have not found anyone else who have done a similar implementation, maybe I have looked the wrong places , maybe I just got it wrong and it is really nice with a mother of all base model, or we really benefit from having a long prototype chain.s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#oredev The Bad Parts]]></title>
    <link href="http://elgsdyret.github.io/blog/2011/11/13/oredev-bad-parts/"/>
    <updated>2011-11-13T10:59:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2011/11/13/oredev-bad-parts</id>
    <content type="html"><![CDATA[<p>Thankfully, this post if going to be a lot shorter than the <a href="http://elgsdyret.github.io/blog/2011/11/13/oredev-good-parts/">good parts</a>, but I think with a bit of improvement Ãredev can move from being a very good conference, to a brilliant conference.</p>

<ul>
<li>The WiFi was a disgrace! Shouldn&rsquo;t be that hard to get working.</li>
<li>Too many sessions were delayed due to faulty cables, projectors, or other technical problems. With a bit more testing and backup cables, projectors, and such readily available, it should be possible to minimize these kinds of problems.</li>
<li>The venue is quite good due to it&rsquo;s location very close to the train station, but the structure of the building makes it hard to move from session to session, and at lunch the main area becomes as crowded as a metro in a reasonably sized city.</li>
</ul>


<p>If this is fixed (at least the first 2 items) and the speaker quality stays high, Ãredev 2012 is going to be brilliant.</p>

<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Nikolaj K N</div>
<div class='content'>
Hi Emily,<br /><br />Really nice to hear from you, means my feedback ended up the right place.<br /><br />I hope you will be able to push the boundaries of the WiFi even further, and improve the experience for all.<br /><br />I am looking forward to see it and will be sure to test it again next year.<br /><br />Best Regards<br /><br />/Nikolaj</div>
</div>
<div class='comment'>
<div class='author'>Emily Holweck</div>
<div class='content'>
Hi,<br /><br />as the organiser of the event, I want to answer your post :) I did read the nice post as well and thank you for both your posts!!!! <br /> I asked our technician Andreas, who has done a fantastic job, why we have so many difficulties with the network, here is his answer: <br /><br />&quot;I was checking the wifi in different locations every day several times and got good throughput (10mbs/11mbs). We build a completely new hotspot network in 1Â½ week, The building it self is made of stonewalls and there is allot of steel frameworks in the building so we tried to fine tune the radio during the conference.<br /> <br />The wifi on the paper should handle more than 5000 simultaneous connections, it was the hotspots itself that where the bottleneck and we placed about 20 of those and they should hold 256 simultaneous connections each. The backend delivers more than 3Gbit throughput and up to 500.000 packets per second.&quot; <br /><br />Well, it is not that easy! <br />I hope we can improve next year. And I hope you will visit us again!<br /><br />Kind regards,<br />Emily Holweck, Ãredev AB</div>
</div>
<div class='comment'>
<div class='author'>rafek</div>
<div class='content'>
That&#39;s funny because last year I wasn&#39;t able to actually connect to the WiFi with my Samsung smartphone.. but this year, the very same Samsung and I tweeted all the time :)</div>
</div>
<div class='comment'>
<div class='author'>Nikolaj K N</div>
<div class='content'>
My recollection is that it was bad last year as well (albeit I recall it as being slightly better back then). Either way I don&#39;t think it was good enough. To compare at the GotoCON conference in Copenhagen this year I experienced almost no problems with the WiFi</div>
</div>
<div class='comment'>
<div class='author'>rafek</div>
<div class='content'>
WiFi was muuuch better than last year..</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#oredev - The Good Parts]]></title>
    <link href="http://elgsdyret.github.io/blog/2011/11/13/oredev-good-parts/"/>
    <updated>2011-11-13T09:42:00+01:00</updated>
    <id>http://elgsdyret.github.io/blog/2011/11/13/oredev-good-parts</id>
    <content type="html"><![CDATA[<p>The Ãredev conference 2011 is now over and at this point I have even managed to catch up on missing sleep and cut down on the coffee usage!</p>

<p>As usual the conference was a success (from my perspective) with brilliant speakers and interesting topics, and this is my presentation of the good parts.</p>

<h3>Monday</h3>

<p>This day I was fortunate enough to have TDD training with <a href="http://www.coreyhaines.com/">Corey Haines</a>. We started out with a simple code kata, and quickly more followed, which were solved in pairs or alone.</p>

<p>During these exercises the <a href="http://cleancoder.posterous.com/the-transformation-priority-premise">Transformation Priority Premise</a> was introduced, something I originally discovered when Uncle Bob invented it a while ago. Didn&rsquo;t really get it back then, but now at least I get the concept and can apply it albeit clumsily.</p>

<p>In the late afternoon Corey spoke a bit about Mocking and general challenges encountered by the different attendants. Even though, I did get a lot of value from this part it did at times seem unstructured and slightly random.</p>

<p>In general a very good day, and maybe next time Corey will have a Mocking kata up his sleeve in the event that it is requested?</p>

<h3>Tuesday</h3>

<p>Another day of training, this day I attended the Git Bootcamp with <a href="http://www.ambientideas.com/blog/">Matthew J. McCullough</a>. I have been using Git for a few months now with a central SVN repository, and felt I was ready to move to the next level.</p>

<p>With the energetic guidance of Matthew the entire room was quickly up and running and within a few hours I discovered the first new gem of Git.</p>

<p>Before lunch Matthew promised to show us something truly mind blowing with Git, but unfortunately I had seen the trick before and was slightly disappointed. This got me thinking how fast you become used to Source Control being a welcome tool in your everyday developer life with Git, as opposed to all the pain felt before starting to use Git.</p>

<p>Again a very good day, and I do believe I managed to move to the next level. If you are looking for a day of Git training, this definitely seems like the way to do it.</p>

<h3>Wednesday</h3>

<p>The conference was properly kicked off with an inspiring keynote from <a href="http://alexisohanian.com/">Alexis Ohanian</a> regarding getting your mother away from your website, or was it getting other users than your mother? Seems our business is slowly realizing that all that really matters is the users. Fortunately, there are plenty of companies that have yet to realize and act on this, leaving a ton of opportunities to grab their customers if you execute!</p>

<p>I had really looked forward to seeing <a href="http://yehudakatz.com/">Yehuda Katz</a> and both his talk on <a href="http://www.sproutcore.com/">SproutCore</a> and <a href="http://rubyonrails.org/">Rails</a> Serializer were quite brilliant. Very intriguing technique he applied for the first talk having slides with inline JavaScript console &ndash; worked quite well, when the dependency on being online was removed.</p>

<p>In the afternoon I hadn&rsquo;t really figured out what to see, and ended up attending a session on TDD with JavaScript. I expected to see some random Swedish or Danish dude named Christian Johansen, but turned out it was THE <a href="http://cjohansen.no/">Christian Johansen</a>, author of Test-Driven JavaScript Development, creator of <a href="http://sinonjs.org/">Sinon.JS</a>, and Norwegian. This session was the most impressive live coding session I have ever seen with Christian creating a small JQuery plugin in 50 minutes &ndash; test driven and everything. Very impressive!</p>

<h3>Thursday</h3>

<p>This day I started out with watching Greg Young explaining how not to apply CQRS. Greg chose to forego slides and coding, and just slowly wandered back and forth on the stage while visualizing his points with war-stories from the real world. Mainly:</p>

<ul>
<li>Do not apply CQRS as a top level architecture, creating a monolithic CQRS system. You will fail.</li>
<li>Apply CQRS in a bounded context &ndash; but only if the context gives you a competitive advantage. Otherwise you will fail.</li>
<li>Do not create a CQRS framework, at least not before you have implemented CQRS in at least 5 different systems.</li>
</ul>


<p>I think few speakers have the charisma, memory (no notes), and voice (I am not even sure the mike worked) to pull this off &ndash; Greg Young does.</p>

<h3>Friday</h3>

<p>Unfortunately, I could not attend Friday&rsquo;s sessions. How was it?</p>

<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Alexander Beletsky</div>
<div class='content'>
That sounds like a great boost you got there).. Ãredev is cool, hope some videos will be available soon.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basket, Frameworks, Empowerment, and the Holy Goat]]></title>
    <link href="http://elgsdyret.github.io/blog/2011/09/29/basket-frameworks-empowerment-and-holy/"/>
    <updated>2011-09-29T09:40:00+02:00</updated>
    <id>http://elgsdyret.github.io/blog/2011/09/29/basket-frameworks-empowerment-and-holy</id>
    <content type="html"><![CDATA[<p>First of a few disclaimers : The title of this post probably does not make a lot of sense (if any). Any perceived person and/or organization in this blog post is not intended &ndash; it is based on my experience in several projects, for different companies, and different clients.</p>

<p>This is my first blog post ever!</p>

<p>Chronologically, considering the title of the post, I should write something about basket first. Actually, this post is not about basket at all, but just had to show this great picture of developers from Ukraine and Denmark after playing a bit of basket in the sun.</p>

<p><img src="http://elgsdyret.github.io/images/basket.jpg"></p>

<p>After this short detour lets get back on the track to what I actually want to write a bit about &ndash; what motivates a developer.</p>

<p>Ramble: It seems to be the perception from people looking at developers from the outside, be it managers, project managers, or people from the street that all developers care about is playing with new toys (languages, frameworks, new hardware, or gadgets).</p>

<p>While most developers love new toys (like women love new shoes), what motivates a developer is actually far more nuanced than just the urge to try new stuff. Albeit, some developers are motivated by money, most I have met (including myself) are motivated by an urge to craft software and learn. We want to craft stuff smarter, faster, with fewer bugs, and better features.</p>

<p>This is probably why developers in start-up companies seem to be more motivated &ndash; they have a clean slate and can craft and learn according to what is the smartest (perceived!) way of working at that point in time. After a few years what was smartest back in the beginning is probably not the smartest anymore, but more importantly the developers have learned a lot, and can now do even smarter (again perceived) stuff. But at this time the products and systems they work on have a lot of customers, thus the level of risk the business is willing to take decrease dramatically &ndash; meaning the developers get to craft and learn less. Thus, eventually the developers will become demotivated (seems to be close to a law of nature &ndash; at least from my personal experience).</p>

<p>There are a couple of challenges with demotivated developers.</p>

<ul>
<li>Retention becomes harder.</li>
<li>Hiring becomes harder.</li>
</ul>


<p>In the very best scenarios the developers are also very professional people (they do get paid) and will do their job adequately &ndash; but they will never do a GREAT job. For that they need to be motivated.</p>

<h3>Avoiding this trap?</h3>

<p>If it was easy less software products/ projects would fail. Nevertheless, I believe there is a path. Good developers have the urge to craft and learn just as strongly as all other developers, maybe even stronger. But, more importantly good developers also understand the business and the customers. Thus, a good developer would be able to determine quite well when to take which risks regarding which frameworks, languages, platforms, methodologies, etc. are used. A good developer also understands that not all risks should be taken at the same time: In general the good developer will be able to help guide the direction of the software.</p>

<p>Thus, to have motivated developers your need to empower the developer (does not mean no control &ndash; just more influence). This may sound risky, and indeed it is. If you empower a bad developer the results will not be nice &ndash; probably close to catastrophic. If you empower a good developer you are not guaranteed success, but you know that at the very least he will fight to succeed.</p>

<p>Soooo&hellip; empowerment is risky even with good developers (if you are choosing not to empower your developers because you believe they are bad I can only ask why the hell you are hiring bad developers (and keeping them)).</p>

<p>What&rsquo;s the alternative? Demotivated developers&hellip;. I honestly do not believe you can successfully run a business based on software with demotivated developers working on it &ndash; it will fail, sooner or later &ndash; if you don&rsquo;t change.</p>

<h3>How much?</h3>

<p>So how much should you empower your developers? This is not easy either &ndash; for some developers you can give almost free reins &ndash; while others need a quite firm hand controlling.</p>

<p>If I find the solution for this last bit, I will be sure to let you know :&ndash;)</p>

<p>/Ramble</p>
]]></content>
  </entry>
  
</feed>
